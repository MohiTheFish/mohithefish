{"version":3,"sources":["components/Loading/loading.jsx","pages/testing.jsx","pages/MainPage/mainPage.jsx","redux/reducers/nameReducers.js","redux/actions/gameActions.js","redux/reducers/gameReducers.js","redux/actions/spyfallActions.js","redux/reducers/playReducers.js","redux/reducers/index.js","redux/actions/nameActions.js","redux/store/index.js","pages/Games/games.jsx","pages/Games/Spyfall/spyfall.jsx","pages/Games/socketHandlers.js","pages/Games/WaitingRoom/RoomInfoComponents/myInput.jsx","pages/Games/WaitingRoom/roomInfo.jsx","pages/Games/WaitingRoom/connectedChoices.jsx","pages/Games/WaitingRoom/waitingRoom.jsx","components/NavBar/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Loading","className","MainPage","useState","count","setCount","email","setEmail","number","setNumber","imageName","setImageName","useEffect","a","fetch","method","headers","then","res","json","image","response","console","log","document","title","fetchData","onClick","type","value","onChange","e","target","src","alt","to","storageType","sessionStorage","initialState","username","gamename","userId","getItem","uuid","setItem","existUserId","setIsConnected","isConnected","setIsLoadingRoom","isLoadingRoom","selectedChoice","numPlayers","host","members","roomname","myIndex","rooms","isPlaying","addLocationSpyfall","data","innerHTML","removeLocationSpyfall","addNameSpyfall","index","removeNameSpyfall","time","spyfall","selectedLocations","Set","selectedNamesByIndex","spyIndex","locations","secretLocation","combineReducers","gameCredentials","state","action","gameData","Object","assign","hostname","length","deletedIndex","newState","slice","filter","m","initialGameState","playState","gameState","clonedLocations","add","delete","clonedNames","defaultState","initialGameData","initialGameCredentialState","initialPlayState","store","createStore","MohiApp","JSON","parse","myState","loadState","saveState","allGames","Games","getState","name","setName","redirectPage","setRedirectPage","validateName","isInvalid","msg","Boolean","dispatch","push","TextField","error","required","id","label","variant","helperText","map","val","Button","key","color","disabled","SubscribedSpyfall","connect","gd","ps","game","isSpy","props","getSelectedClassN","set","addCall","removeCall","isSelected","has","callback","selectClass","role","aria-label","getSelectedClassL","socket","getAvailableRooms","Error","emit","joinRoom","targetRoom","trim","startGame","TextInput","roomId","setRoomId","submit","FormControl","InputLabel","htmlFor","OutlinedInput","onKeyPress","which","keyCode","endAdornment","InputAdornment","position","IconButton","children","onMouseDown","preventDefault","edge","labelWidth","SubscribedRoomInfo","hostClass","renderMembers","Grid","container","spacing","room","item","xs","renderAvailableRooms","setDisableProps","obj","SubscribedConnectedChoices","handleSelect","createRoom","createButtonProps","joinButtonProps","disableRipple","disableElevation","SubscribedWaitingRoom","location","uid","newSocket","io","reconnection","reconnectionDelay","reconnectionDelayMax","reconnectionAttempts","on","roomInfo","startSpyfall","playerLeft","connectToServer","stringify","pathname","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","ButtonAppBar","classes","AppBar","Toolbar","createMuiTheme","palette","primary","blue","secondary","green","status","danger","App","ThemeProvider","basename","exact","path","component","Testing","NavBar","Spyfall","WaitingRoom","window","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.45feeb3f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './loading.scss';\r\n\r\nexport default function Loading() {\r\n  return (\r\n    <div className=\"lds-ripple\">\r\n      <div />\r\n      <div />\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Loading from 'components/Loading/loading';\r\n\r\nexport default function MainPage() {\r\n  const [count, setCount] = useState(0);\r\n  const [email, setEmail] = useState('');\r\n\r\n  const [number, setNumber] = useState(1);\r\n\r\n  const [imageName, setImageName] = useState('');\r\n\r\n  useEffect( () => {\r\n    document.title = \"MohiTheFish\"\r\n    async function fetchData() {\r\n        \r\n      const response = await fetch(\"https://cors-anywhere.herokuapp.com/https://randomfox.ca/floof/?ref=apilist.fun\", \r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          'content-type': 'application/json'\r\n        }\r\n      }).then(res => res.json())\r\n      .then(res => {\r\n        setImageName(res.image);\r\n      });\r\n      console.log(response);\r\n      \r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n  const handleChange = (e) => {\r\n    setEmail(e.target.value);\r\n  }\r\n  return (\r\n    <div>\r\n      This page is being used to test new features.\r\n      <div>\r\n        <p>You clicked {count} times</p>\r\n        <button onClick={() => setCount(count+1)}>\r\n          Click me\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <input type='text' value={email} onChange={handleChange} />\r\n      </div>\r\n      <div>\r\n        <h1>Pick a movie</h1>\r\n        <select value={number} onChange={e => setNumber(e.target.value)}>\r\n          <option value=\"1\">1</option>\r\n          <option value=\"2\">2</option>\r\n          <option value=\"3\">3</option>\r\n          <option value=\"4\">4</option>\r\n          <option value=\"5\">5</option>\r\n          <option value=\"6\">6</option>\r\n        </select>\r\n      </div>\r\n\r\n      { imageName === '' ? <Loading /> : <img src={imageName} alt=\"A fox\" />}\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './mainPage.scss';\r\n\r\nexport default function MainPage() {\r\n  return (\r\n    <div className=\"main-page-wrapper\">\r\n      <div className=\"intro\">\r\n        <h1>Muhammed Imran</h1>\r\n        <h2>MohiTheFish</h2>\r\n\r\n        <Link to=\"/games\">Click me to see some games.</Link> \r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { SET_GAME_USERNAME } from '../actions/nameActions';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nconst storageType = sessionStorage;\r\n\r\nfunction existUserId() {\r\n  let a = storageType.getItem('userId');\r\n\r\n  if(a) {return a;}\r\n\r\n  a = uuid();\r\n  storageType.setItem('userId', a);\r\n  return a;\r\n}\r\n\r\nexport const initialState = {\r\n  username: \"\",\r\n  gamename: \"\",\r\n  userId: existUserId(),\r\n};\r\n\r\nexport function gameCredentials(state = initialState, action) {\r\n  switch(action.type) {\r\n    case SET_GAME_USERNAME: {\r\n      return {\r\n        username: action.username,\r\n        gamename: action.gamename,\r\n        userId: state.userId,\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}","export const GET_AVAILABLE_GAMES = 'GET_AVAILABLE_GAMES';\r\nexport const SET_IS_CONNECTED = 'SET_IS_CONNECTED'; \r\nexport const SET_IS_LOADINGROOM = 'SET_IS_LOADINGROOM';\r\nexport const SET_SELECTED_CHOICE = 'SET_SELECTED_CHOICE';\r\nexport const SET_HOST_NAME = \"SET_HOST_NAME\";\r\nexport const ROOM_CREATED = \"ROOM_CREATED\";\r\nexport const ROOM_UPDATED = \"ROOM_UPDATED\";\r\nexport const VISIBLE_ROOMS = \"VISIBLE_ROOMS\";\r\nexport const ROOM_JOINED = \"ROOM_JOINED\";\r\nexport const PLAYER_LEFT = \"PLAYER_LEFT\";\r\nexport const START_PLAYING = \"START_PLAYING\";\r\n\r\nexport function setIsConnected(isConnected) {\r\n  return {\r\n    type: SET_IS_CONNECTED,\r\n    isConnected,\r\n  };\r\n}\r\n\r\nexport function setSelectedChoice(selectedChoice) {\r\n  return {\r\n    type: SET_SELECTED_CHOICE,\r\n    selectedChoice,\r\n  };\r\n}\r\n\r\nexport function setIsLoadingRoom(isLoadingRoom) {\r\n  return {\r\n    type: SET_IS_LOADINGROOM,\r\n    isLoadingRoom,\r\n  };\r\n}\r\n\r\nexport function setHostName(host) {\r\n  return {\r\n    type: SET_HOST_NAME,\r\n    host,\r\n  }\r\n}\r\n\r\nexport function roomCreated(data) {\r\n  return {\r\n    type: ROOM_CREATED,\r\n    data,\r\n  };\r\n}\r\n\r\nexport function roomUpdated(data) {\r\n  return {\r\n    type: ROOM_UPDATED,\r\n    data,\r\n  };\r\n}\r\n\r\nexport function visibleRooms(data) {\r\n  return {\r\n    type: VISIBLE_ROOMS,\r\n    data,\r\n  }\r\n}\r\n\r\nexport function roomJoined(data) {\r\n  return {\r\n    type: ROOM_JOINED,\r\n    data,\r\n  }\r\n}\r\n\r\nexport function playerLeft(index) {\r\n  return {\r\n    type: PLAYER_LEFT,\r\n    index,\r\n  };\r\n}\r\n\r\nexport function startPlaying() {\r\n  return {\r\n    type: START_PLAYING,\r\n    isPlaying: true,\r\n  }\r\n}","import {\r\n  SET_IS_CONNECTED,\r\n  SET_IS_LOADINGROOM,\r\n  SET_SELECTED_CHOICE,\r\n  SET_HOST_NAME,\r\n  ROOM_CREATED,\r\n  VISIBLE_ROOMS,\r\n  ROOM_UPDATED,\r\n  ROOM_JOINED,\r\n  PLAYER_LEFT,\r\n  START_PLAYING,\r\n} from '../actions/gameActions';\r\n\r\nexport const initialState = {\r\n  isConnected: false,\r\n  selectedChoice: \"\",\r\n  isLoadingRoom: false,\r\n  numPlayers: 1,\r\n  host: \"\",\r\n  members: [],\r\n  roomname: \"\",\r\n  myIndex: -1,\r\n  rooms: [],\r\n  isPlaying: false,\r\n}\r\n\r\nexport function gameData(state = initialState, action) {\r\n  switch(action.type) {\r\n    case SET_IS_CONNECTED:\r\n      return Object.assign({}, state, {\r\n        isConnected: action.isConnected\r\n      });\r\n    case SET_IS_LOADINGROOM:\r\n      return Object.assign({}, state, {\r\n        isLoadingRoom: action.isLoadingRoom\r\n      });\r\n    case SET_SELECTED_CHOICE:\r\n      return Object.assign({}, state, {\r\n        selectedChoice: action.selectedChoice\r\n      });\r\n    case SET_HOST_NAME:\r\n      return Object.assign({}, state, {\r\n        host: action.host\r\n      });\r\n    case ROOM_CREATED: {\r\n      const { hostname, members, roomname } = action.data;\r\n      return Object.assign({}, state, {\r\n        host: hostname,\r\n        members: members,\r\n        roomname: roomname,\r\n        myIndex: members.length-1,\r\n      });\r\n    }\r\n    case ROOM_UPDATED: {\r\n      const { hostname, members, roomname } = action.data;\r\n      return Object.assign({}, state, {\r\n        host: hostname,\r\n        members: members,\r\n        roomname: roomname,\r\n        myIndex: state.myIndex,\r\n      });\r\n    }\r\n    case VISIBLE_ROOMS: {\r\n      return Object.assign({}, state, {\r\n        rooms: action.data.rooms,\r\n        isLoadingRoom: false, \r\n      });\r\n    }\r\n    case ROOM_JOINED: {\r\n      const { hostname, members, roomname } = action.data;\r\n      return Object.assign({}, state, {\r\n        host: hostname,\r\n        members: members,\r\n        roomname: roomname,\r\n        myIndex: members.length-1,\r\n      });\r\n    }\r\n    case PLAYER_LEFT: {\r\n      const { members, myIndex } = state;\r\n      const { index: deletedIndex } = action;\r\n      const newState = {\r\n        myIndex,\r\n        members: [],\r\n      };\r\n      if (deletedIndex === -1) {\r\n        newState.members = members.slice(1);\r\n        newState.myIndex -= 1;\r\n        if (newState.myIndex === -1) {\r\n          newState.selectedChoice = \"create\";\r\n        }\r\n        newState.host = members[0];\r\n      }\r\n      else {\r\n        if (deletedIndex < myIndex) {\r\n          newState.myIndex -= 1;\r\n        }\r\n        newState.members =  members.filter((m, index) => (index !== deletedIndex) );\r\n      }\r\n      return Object.assign({}, state, newState);\r\n    }\r\n    case START_PLAYING: {\r\n      return Object.assign({}, state, {\r\n        isPlaying: true,\r\n        initialGameState: action.initialGameState\r\n      });\r\n    }\r\n    default:\r\n      return state;\r\n  } \r\n}","export const START_GAME_SPYFALL = \"START_GAME_SPYFALL\";\r\nexport const ADD_LOCATION_SPYFALL = \"ADD_LOCATION_SPYFALL\";\r\nexport const REMOVE_LOCATION_SPYFALL = \"REMOVE_LOCATION_SPYFALL\";\r\nexport const ADD_NAME_SPYFALL = \"ADD_NAME_SPYFALL\";\r\nexport const REMOVE_NAME_SPYFALL = \"REMOVE_NAME_SPYFALL\";\r\n\r\nexport function startSpyfall(gameState) {\r\n  return {\r\n    type: START_GAME_SPYFALL,\r\n    gameState, \r\n  };\r\n}\r\n\r\nexport function addLocationSpyfall(e) {\r\n  return {\r\n    type: ADD_LOCATION_SPYFALL,\r\n    data: e.target.innerHTML,\r\n  };\r\n}\r\n\r\nexport function removeLocationSpyfall(e) {\r\n  return {\r\n    type: REMOVE_LOCATION_SPYFALL,\r\n    data: e.target.innerHTML,\r\n  };\r\n}\r\n\r\nexport function addNameSpyfall(index) {\r\n  return {\r\n    type: ADD_NAME_SPYFALL,\r\n    data: index,\r\n  };\r\n}\r\n\r\nexport function removeNameSpyfall(index) {\r\n  return {\r\n    type: REMOVE_NAME_SPYFALL,\r\n    data: index,\r\n  };\r\n}","import {\r\n  ADD_LOCATION_SPYFALL,\r\n  REMOVE_LOCATION_SPYFALL,\r\n  ADD_NAME_SPYFALL,\r\n  REMOVE_NAME_SPYFALL,\r\n  START_GAME_SPYFALL,\r\n} from 'redux/actions/spyfallActions';\r\n\r\nexport const initialState = {\r\n  time: 0,\r\n  spyfall: {\r\n    selectedLocations: new Set(),\r\n    selectedNamesByIndex: new Set(),\r\n    spyIndex: 0,\r\n    locations: [],\r\n    secretLocation: \"\",\r\n  },\r\n};\r\n\r\nexport function playState(state = initialState, action) {\r\n  switch(action.type) {\r\n    case START_GAME_SPYFALL: {\r\n      return {\r\n        time: action.gameState.time,\r\n        spyfall: {\r\n          spyIndex: action.gameState.spyIndex,\r\n          selectedLocations: state.spyfall.selectedLocations,\r\n          selectedNamesByIndex: state.spyfall.selectedNamesByIndex,\r\n          locations: action.gameState.locations,\r\n          secretLocation: action.gameState.secretLocation,\r\n        }\r\n      };\r\n    }\r\n    case ADD_LOCATION_SPYFALL: {\r\n      const {selectedLocations} = state.spyfall;\r\n      const clonedLocations = new Set(selectedLocations);\r\n      clonedLocations.add(action.data);\r\n      return Object.assign({}, state, {\r\n        spyfall: {\r\n          ...state.spyfall,\r\n          selectedLocations: clonedLocations,\r\n        }\r\n      });\r\n    }\r\n    case REMOVE_LOCATION_SPYFALL: {\r\n      const {selectedLocations} = state.spyfall;\r\n      const clonedLocations = new Set(selectedLocations);\r\n      clonedLocations.delete(action.data);\r\n      return Object.assign({}, state, {\r\n        spyfall: {\r\n          ...state.spyfall,\r\n          selectedLocations: clonedLocations,\r\n        }\r\n      });\r\n    }\r\n    case ADD_NAME_SPYFALL: {\r\n      const {selectedNamesByIndex} = state.spyfall;\r\n      const clonedNames = new Set(selectedNamesByIndex);\r\n      clonedNames.add(action.data);\r\n      return Object.assign({}, state, {\r\n        spyfall: {\r\n          ...state.spyfall,\r\n          selectedNamesByIndex: clonedNames,\r\n        }\r\n      });\r\n    }\r\n    case REMOVE_NAME_SPYFALL: {\r\n      const {selectedNamesByIndex} = state.spyfall;\r\n      const clonedNames = new Set(selectedNamesByIndex);\r\n      clonedNames.delete(action.data);\r\n      return Object.assign({}, state, {\r\n        spyfall: {\r\n          ...state.spyfall,\r\n          selectedNamesByIndex: clonedNames,\r\n        }\r\n      });\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from 'redux';\r\nimport { gameCredentials } from './nameReducers';\r\nimport { gameData } from './gameReducers';\r\nimport { playState } from './playReducers';\r\nexport default combineReducers({\r\n  gameCredentials,\r\n  gameData,\r\n  playState,\r\n});\r\n","export const SET_GAME_USERNAME = \"SET_GAME_USERNAME\";\r\n\r\nexport function setGameUsername(data) {\r\n  return {\r\n    type: SET_GAME_USERNAME,\r\n    username: data.username,\r\n    gamename: data.gamename,\r\n  };\r\n}\r\n","import { createStore } from 'redux'\r\nimport MohiApp from '../reducers';\r\nimport {initialState as initialGameData} from '../reducers/gameReducers';\r\nimport {initialState as initialGameCredentialState} from '../reducers/nameReducers';\r\nimport {initialState as initialPlayState} from '../reducers/playReducers';\r\n\r\n/**\r\n * REDUX WORK FLOW\r\n * 1) Create an action. Follow the schema already defined.\r\n *  (Create a constant action type. Setup the data to be passed to reducer)\r\n * 2) Add to the reducer. Follow the schema already defined. \r\n *  (Make sure to return an object that has all keys as before.)\r\n * 3) You may now *dispatch* an action from anywhere.\r\n *  (Note: component must *subscribe* via the connect method in order to be refreshed)\r\n * Maybe 4) Sometimes you may want to create a whole separate data flow. Simply create the relevant files\r\n *  and then make sure to update this default state to include those changes. \r\n */\r\nconst defaultState = {\r\n  gameData: initialGameData,\r\n  gameCredentials: initialGameCredentialState,\r\n  playState: initialPlayState,\r\n};\r\n// console.log(defaultState);\r\nexport const storageType = sessionStorage;\r\n\r\nfunction loadState() {\r\n  const gameData = JSON.parse(storageType.getItem('gameData'));\r\n  const username = storageType.getItem('username');\r\n  const gamename = storageType.getItem('gamename');\r\n  const userId = storageType.getItem('userId');\r\n\r\n  if (!username || !gamename || !userId) {\r\n    return defaultState;\r\n  }\r\n  const myState = {};\r\n  myState.gameCredentials = {\r\n    username,\r\n    gamename,\r\n    userId,\r\n  }\r\n\r\n  if (gameData && gameData.isPlaying) {\r\n    myState.gameData = gameData;\r\n  }\r\n  else {\r\n    myState.gameData = initialGameData;\r\n  }\r\n\r\n  myState.playState = initialPlayState;\r\n\r\n  return myState;\r\n}\r\n\r\nconst store = createStore(MohiApp, loadState());\r\n// console.log(store.getState());\r\n\r\nexport function saveState(state) {\r\n  const { username, gamename, userId } = state.gameCredentials;\r\n  storageType.setItem('username', username);\r\n  storageType.setItem('gamename', gamename);\r\n  storageType.setItem('userId', userId);\r\n}\r\n\r\nexport function saveCurrentState() {\r\n  saveState(store.getState());\r\n}\r\n\r\n\r\n// store.subscribe(() => {\r\n//   console.log(store.getState());\r\n// })\r\nexport default store;","import React, { useState, useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport store, { saveState } from 'redux/store';\r\nimport {\r\n  setGameUsername\r\n} from 'redux/actions/nameActions';\r\n\r\nimport './games.scss';\r\n\r\nconst allGames = [\r\n  'spyfall',\r\n];\r\n\r\n\r\nfunction validateName(name) {\r\n  if (!name) {\r\n    return [true, 'Name cannot be empty.'];\r\n  }\r\n  return [false, \"\"];\r\n}\r\n\r\n\r\nexport default function Games() {\r\n  const [name, setName] = useState(store.getState().gameCredentials.username);\r\n  const [redirectPage, setRedirectPage] = useState(\"\");\r\n\r\n  useEffect ( () => {\r\n    document.title = \"Games\";\r\n  }, []);\r\n\r\n  function handleChange(e) {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  /**\r\n   * @todo Look into creating the component as soon as the link is pressed.\r\n   */\r\n  const [isInvalid, msg] = validateName(name);\r\n  if (Boolean(redirectPage) && !isInvalid) {\r\n    store.dispatch(setGameUsername({\r\n      username: name,\r\n      gamename: redirectPage,\r\n    }));\r\n\r\n    saveState(store.getState());\r\n    return (\r\n     <Redirect push to={`/games/${redirectPage}`}/>\r\n   );\r\n  }\r\n  return (\r\n    <div className=\"games-page-wrapper\">\r\n      <h1 className=\"header\">Games</h1>\r\n      <h3 className=\"input-message\">Please create your username before continuing.</h3>\r\n      <div className=\"input\">\r\n        <TextField\r\n          error={isInvalid}\r\n          required\r\n          id=\"filled-required\"\r\n          label=\"Required\"\r\n          variant=\"filled\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          helperText={msg}\r\n        />\r\n      </div>\r\n\r\n\r\n      <div className=\"buttons-wrapper\">\r\n        {\r\n          allGames.map(val =>\r\n            <Button \r\n              key={val}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              disabled={isInvalid}\r\n              onClick={() => setRedirectPage(val)}\r\n            >\r\n              {val}\r\n            </Button>\r\n          )\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './spyfall.scss';\r\n\r\nimport { \r\n  addLocationSpyfall,\r\n  removeLocationSpyfall,\r\n  addNameSpyfall,\r\n  removeNameSpyfall,\r\n} from 'redux/actions/spyfallActions';\r\nimport store from 'redux/store';\r\n\r\nfunction mapStateToProps(state) {\r\n  const gd = state.gameData;\r\n  const ps = state.playState;\r\n  const game = ps.spyfall;\r\n  // console.log(state);\r\n  return {\r\n    gameCredentials: state.gameCredentials,\r\n    host: gd.host,\r\n    members: gd.members,\r\n    myIndex: gd.myIndex,\r\n    \r\n    time: ps.time,\r\n    selectedLocations: game.selectedLocations,\r\n    selectedNamesByIndex: game.selectedNamesByIndex,\r\n    isSpy: game.spyIndex === gd.myIndex,\r\n    locations: game.locations,\r\n    secretLocation: game.secretLocation,\r\n  };\r\n}\r\n\r\nfunction Spyfall(props) {\r\n  const {\r\n    gameCredentials,\r\n    host,\r\n    members,\r\n    myIndex,\r\n    time,\r\n    selectedLocations,\r\n    selectedNamesByIndex,\r\n    isSpy,\r\n    locations,\r\n    secretLocation,\r\n  } = props;\r\n\r\n  function getSelectedClassL(val, set, addCall, removeCall) {\r\n    const isSelected = set.has(val);\r\n    let callback = addCall;\r\n    let selectClass = \"\";\r\n    if (isSelected) {\r\n      callback = removeCall;\r\n      selectClass = \"selected\";\r\n    }\r\n    return [selectClass, (data) => store.dispatch(callback(data))];\r\n  }\r\n\r\n  function getSelectedClassN(val, set, addCall, removeCall) {\r\n    const isSelected = set.has(val);\r\n    let callback = addCall;\r\n    let selectClass = \"\";\r\n    if (isSelected) {\r\n      callback = removeCall;\r\n      selectClass = \"selected\";\r\n    }\r\n    return [selectClass, (data) => store.dispatch(callback(val))];\r\n  }\r\n  function renderNames() {\r\n    return members.map( (name, index) => {\r\n      const [selectClass, callback] = getSelectedClassN(index, selectedNamesByIndex, addNameSpyfall, removeNameSpyfall);\r\n      return (\r\n        <h4 key={name}\r\n         className={selectClass}\r\n         onClick={callback}>\r\n          {name}\r\n        </h4>\r\n      )\r\n    })\r\n  }\r\n\r\n  function renderLocations() {\r\n    return locations.map( (value, index) => {\r\n      const [selectClass, callback] = getSelectedClassL(value, selectedLocations, addLocationSpyfall, removeLocationSpyfall);\r\n      return (\r\n        <div\r\n          key={value} \r\n          className={`location vertically-center-text ${selectClass}`}\r\n          onClick={callback}\r\n        > \r\n          <p>{value}</p>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  const [selectClass, callback] = getSelectedClassN(-1, selectedNamesByIndex, addNameSpyfall, removeNameSpyfall);\r\n  return (\r\n    <div className=\"wrapper spyfall-page-wrapper\">\r\n      <div className=\"header\">\r\n        <h1>Play Spyfall</h1>\r\n        <h4>Your name is: {gameCredentials.username}</h4>\r\n          {\r\n            isSpy \r\n            ? <h4>You ARE the spy! <span role=\"img\" aria-label=\"spy emoji\">🕵️</span> <br/> Figure out the secret location!</h4>\r\n            : <h4>You are NOT the spy. <br/> The location is <span className=\"secret-location\">{secretLocation}</span></h4>\r\n          }\r\n      </div>\r\n\r\n      <div className=\"players-list\">\r\n        <h2 className=\"header\">Players</h2>\r\n        <div className=\"names\">\r\n          <h4 key={host}\r\n            className={selectClass}\r\n            onClick={callback}>\r\n              {host}\r\n          </h4>\r\n          {\r\n            renderNames()\r\n          }\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"location-section\">\r\n        <h2 className=\"header\">Locations</h2>\r\n        <div className=\"location-wrapper\">\r\n          {\r\n            renderLocations()\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\nconst SubscribedSpyfall = connect(mapStateToProps)(Spyfall);\r\nexport default SubscribedSpyfall;\r\n// export default class Spyfall extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n\r\n//     /* Best way to keep track of the name after refreshing??? */\r\n//     const { username, gamename } = store.getState().gameCredentials;\r\n//     this.myName = username;\r\n//     this.gameName = gamename;\r\n\r\n//     this.state = {\r\n//       selectedLocations: new Set(),\r\n//       selectedNames: new Set(),\r\n//       isSpy: true,\r\n//     }\r\n\r\n//     /** Event Handlers */\r\n//     this.select = this.select.bind(this);\r\n//     this.deselect = this.deselect.bind(this);\r\n\r\n//     this.selectName = this.selectName.bind(this);\r\n//     this.deselectName = this.deselectName.bind(this);\r\n\r\n//     /** Render functions */\r\n//     this.renderNames = this.renderNames.bind(this);\r\n//     this.renderLocations = this.renderLocations.bind(this);\r\n//   }\r\n\r\n//   // componentDidMount() {\r\n//   //   document.title = \"Spyfall\";\r\n//   // }\r\n\r\n//   componentDidMount() {\r\n//     document.title = \"Spyfall\";\r\n//   }\r\n\r\n//   selectName(e) {\r\n//     const { selectedNames } = this.state;\r\n//     selectedNames.add(e.target.innerHTML);\r\n//     this.setState({\r\n//       selectedNames,\r\n//     });\r\n//   }\r\n\r\n//   deselectName(e) {\r\n//     const { selectedNames } = this.state;\r\n//     selectedNames.delete(e.target.innerHTML);\r\n//     this.setState({\r\n//       selectedNames,\r\n//     });\r\n//   }\r\n\r\n//   select(e) {\r\n//     const { selectedLocations } = this.state;\r\n//     selectedLocations.add(e.target.textContent);\r\n    \r\n//     this.setState({\r\n//       selectedLocations\r\n//     });\r\n//   }\r\n\r\n//   deselect(e) {\r\n//     const { selectedLocations } = this.state;\r\n//     selectedLocations.delete(e.target.textContent);\r\n\r\n//     this.setState({\r\n//       selectedLocations\r\n//     });\r\n//   }\r\n\r\n\r\n//   renderNames() {\r\n//     const { selectedNames } = this.state;\r\n//     return names.map(name => {\r\n//       const isSelected = selectedNames.has(name);\r\n//       let callback = this.selectName;\r\n//       let selectClass = \"\";\r\n//       if (isSelected) {\r\n//         callback = this.deselectName;\r\n//         selectClass = \"selected\";\r\n//       }\r\n      \r\n//       return (\r\n//         <h4 key={name}\r\n//          className={selectClass}\r\n//          onClick={callback}>\r\n//           {name}\r\n//         </h4>\r\n//       )\r\n//     })\r\n//   }\r\n\r\n//   renderLocations() {\r\n//     const { selectedLocations } = this.state; \r\n//     return locations.map(value => {\r\n//       const isSelected = selectedLocations.has(value);\r\n//       let callback = this.select;\r\n//       let selectClass = \"\";\r\n//       if (isSelected) {\r\n//         callback = this.deselect;\r\n//         selectClass = \"selected\";\r\n//       }\r\n\r\n//       return (\r\n//         <div\r\n//           key={value} \r\n//           className={`location vertically-center-text ${selectClass}`}\r\n//           onClick={callback}\r\n//         > \r\n//           <p>{value}</p>\r\n//         </div>\r\n//       );\r\n//     });\r\n//   }\r\n\r\n//   render () {\r\n//     return (\r\n//       <div className=\"wrapper spyfall-page-wrapper\">\r\n//         <div className=\"header-text\">\r\n//           <h1>Play Spyfall</h1>\r\n//           <h4>Your name is: {this.myName}</h4>\r\n//           <h4>\r\n//             {\r\n//               this.state.isSpy \r\n//               ? \"You ARE the spy! 🕵️\" \r\n//               : \"You are NOT the spy.\"\r\n//             }\r\n//           </h4>\r\n//         </div>\r\n\r\n//         <div className=\"other-players\">\r\n//           <h2 className=\"header\">Other Players</h2>\r\n//           <div className=\"names\">\r\n//             {\r\n//               this.renderNames()\r\n//             }\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"location-section\">\r\n//           <h2 className=\"header\">Locations</h2>\r\n//           <div className=\"location-wrapper\">\r\n//             {\r\n//               this.renderLocations()\r\n//             }\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }","import io from 'socket.io-client';\r\nimport store from 'redux/store';\r\n\r\nimport {\r\n  setIsConnected,\r\n  setIsLoadingRoom,\r\n  roomCreated,\r\n  roomUpdated,\r\n  visibleRooms,\r\n  roomJoined,\r\n  playerLeft,\r\n  startPlaying,\r\n} from 'redux/actions/gameActions';\r\n\r\nimport {\r\n  startSpyfall,\r\n} from 'redux/actions/spyfallActions';\r\n\r\nvar socket = null;\r\nlet userId = null;\r\n\r\nexport function connectToServer() {\r\n  console.log('connecting...');\r\n  const {username, gamename, userId: uid} = store.getState().gameCredentials;\r\n  userId = uid;\r\n  \r\n  let a = `https://mohithefish.herokuapp.com/${gamename}`;\r\n  console.log(`using: ${a}`);\r\n  const newSocket = io.connect(a, {\r\n    reconnection: true,\r\n    reconnectionDelay: 1000,\r\n    reconnectionDelayMax : 5000,\r\n    reconnectionAttempts: 10,\r\n  });\r\n\r\n\r\n  newSocket.on('connect', function() {\r\n    console.log('The client connected');\r\n    socket = newSocket;\r\n\r\n    newSocket.emit('initialConnection', {\r\n      username,\r\n      gamename,\r\n      userId,\r\n    });\r\n    store.dispatch(setIsConnected(true));\r\n  });\r\n\r\n  // newSocket.on('print', function(data) {\r\n  //   console.log(data);\r\n  // });\r\n  \r\n  newSocket.on('createdRoom', function(roomInfo){\r\n    // console.log(roomInfo);\r\n    store.dispatch(roomCreated({\r\n      hostname: roomInfo.hostname,\r\n      roomname: roomInfo.roomname,\r\n      members: roomInfo.members,\r\n    }));\r\n  });\r\n\r\n  newSocket.on('availableRooms', function(rooms) {\r\n    // console.log('these are available rooms');\r\n    // console.log(rooms);\r\n    store.dispatch(visibleRooms({\r\n      rooms\r\n    }));\r\n  });\r\n\r\n  newSocket.on('youJoined', function(roomInfo){\r\n    // console.log(roomInfo);\r\n    store.dispatch(roomJoined({\r\n      hostname: roomInfo.hostname,\r\n      roomname: roomInfo.roomname, \r\n      members: roomInfo.members,\r\n    }))\r\n  }) \r\n\r\n  newSocket.on('othersJoined', function(roomInfo){\r\n    store.dispatch(roomUpdated({\r\n      hostname: roomInfo.hostname,\r\n      roomname: roomInfo.roomname, \r\n      members: roomInfo.members,\r\n    }));\r\n  })\r\n\r\n  newSocket.on('gameStarted', function(gameState){\r\n    // console.log(gameState);\r\n    store.dispatch(startSpyfall(gameState));\r\n    store.dispatch(startPlaying(gameState));\r\n  });\r\n\r\n  newSocket.on('playerLeft', function(index) {\r\n    // console.log('PLAYER LEFT WUT');\r\n    store.dispatch(playerLeft(index));\r\n  });\r\n\r\n  newSocket.on('disconnect', function() {\r\n    // console.log('The client disconnected');\r\n    socket = null;\r\n    store.dispatch(setIsConnected(false));\r\n  });\r\n}\r\n\r\nexport function createRoom() {\r\n  if (!socket) { throw new Error('Socket invalid!');}\r\n\r\n  socket.emit('createRoom', userId);\r\n}\r\n\r\nexport function forceDisconnect() {\r\n  if (!socket) { throw new Error('Socket invalid!');}\r\n\r\n  socket.emit('forceDisconnect');\r\n}\r\n\r\nexport function getAvailableRooms() {\r\n  if (!socket) { throw new Error('Socket invalid!');}\r\n\r\n  store.dispatch(setIsLoadingRoom(true));\r\n  socket.emit('getAvailableRooms', userId);\r\n}\r\n\r\nexport function joinRoom(targetRoom) {\r\n  if (!socket) { throw new Error('Socket invalid!');}\r\n  const data = {\r\n    targetRoom: targetRoom.trim(),\r\n    userId,\r\n  };\r\n  // console.log('joining Room');\r\n  socket.emit('joinRoom', data);\r\n}\r\n\r\nexport function startGame() {\r\n  if (!socket) { throw new Error('Socket invalid!');}\r\n\r\n  socket.emit('startGame', userId);\r\n}","import React, {useState} from 'react';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport ArrowForward from '@material-ui/icons/ArrowForward';\r\n\r\nimport {joinRoom} from '../../socketHandlers';\r\n\r\nconst ENTER_KEY = 13;\r\n\r\nexport default function TextInput() {\r\n  const [roomId, setRoomId] = useState(\"\");\r\n  const preventDefault = (e) => {\r\n    e.preventDefault();\r\n  }\r\n\r\n  function submit() {\r\n    joinRoom(roomId);\r\n  }\r\n  function handleKeyPress(e) {\r\n    if (e.which === ENTER_KEY || e.keyCode === ENTER_KEY) {\r\n      submit();\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <FormControl className=\"form-wrapper\" variant=\"outlined\">\r\n      <InputLabel htmlFor=\"outlined-adornment-roomid\">Room ID</InputLabel>\r\n      <OutlinedInput\r\n        id=\"outlined-adornment-roomid\"\r\n        value={roomId}\r\n        onChange={(e) => {setRoomId(e.target.value);}}\r\n        onKeyPress={handleKeyPress}\r\n        endAdornment={\r\n          <InputAdornment position=\"end\">\r\n            <IconButton\r\n              children={<ArrowForward />}\r\n              onClick={submit}\r\n              onMouseDown={preventDefault}\r\n              edge=\"end\"\r\n            />\r\n          </InputAdornment>\r\n        }\r\n        labelWidth={70}\r\n      />\r\n    </FormControl>\r\n  )\r\n}\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport Loading from 'components/Loading/loading';\r\nimport MyInput from './RoomInfoComponents/myInput';\r\nimport { joinRoom, getAvailableRooms, startGame } from '../socketHandlers';\r\n\r\nfunction mapStateToPropsRI(state) {\r\n  const gd = state.gameData;\r\n  return {\r\n    username: state.gameCredentials.username,\r\n    host: gd.host,\r\n    selectedChoice: gd.selectedChoice,\r\n    isConnected: gd.isConnected,\r\n    isLoadingRoom: gd.isLoadingRoom,\r\n    members: gd.members,\r\n    roomname: gd.roomname,\r\n    myIndex: gd.myIndex,\r\n    rooms: gd.rooms,\r\n  };\r\n}\r\n\r\nfunction renderMembers(members, myIndex) {\r\n  if (members.length === 0) {\r\n    return (\r\n      <div className=\"members\">\r\n        <h3>Share your room id to let others join!</h3>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      {\r\n        myIndex === -1\r\n        ? <Button variant=\"contained\" onClick={startGame} className=\"host-control-panel\">\r\n            Play\r\n          </Button>\r\n        : ''\r\n      }\r\n      <div className=\"members\">\r\n        <h3 className=\"others\">Other players</h3>\r\n        {\r\n          members.map((m, index) => \r\n            <h4 \r\n              className={index === myIndex ? \"my-name\" : \"\"}\r\n              key={`${m}${index}`}>{m}</h4>\r\n          )\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nfunction renderAvailableRooms(rooms, isLoadingRoom) {\r\n  if (isLoadingRoom) {\r\n    return <Loading />;\r\n  }\r\n  if (rooms.length === 0) {\r\n    return <h3 className=\"no-avail-rooms\">Sorry. No other rooms were found at this time.</h3>\r\n  }\r\n  return rooms.map(room => {\r\n    return (\r\n      <Grid item key={room.hostname} xs={12} className=\"room\">\r\n        <Button className=\"data\" onClick={()=>{joinRoom(room.roomname)}}>\r\n          <h3 className=\"left\">\r\n            Host: &nbsp;\r\n            <span className=\"bold\">{room.hostname}</span>\r\n          </h3>\r\n          <h3 className=\"right\">\r\n            Number of Players: &nbsp;\r\n            <span className=\"bold\">{1 + room.numPlayers}</span>\r\n          </h3>\r\n        </Button>\r\n      </Grid>\r\n    )\r\n  })\r\n}\r\n\r\nfunction RoomInfo(props) {\r\n  const { isConnected, selectedChoice, host, roomname, members, myIndex, rooms, isLoadingRoom } = props;\r\n  if (!isConnected || !selectedChoice) { return \"\"; }\r\n\r\n  if (selectedChoice === 'create' || myIndex >= 0) {\r\n    let hostClass = \"\";\r\n    if (myIndex===-1){\r\n      hostClass = \"my-name\"\r\n    }\r\n    return (\r\n      <div className=\"room-info\">\r\n        <div className=\"room-title\">\r\n          <h2>Host: <span className={hostClass}>{host}</span></h2>\r\n          <h2>Room id: {roomname}</h2>\r\n        </div>\r\n          {renderMembers(members, myIndex)}\r\n      </div>\r\n    );\r\n  }\r\n  else { //selectedChoice === \"join\"\r\n    return (\r\n      <div className=\"room-info\">\r\n        <div className=\"input\">\r\n          <h4>Enter the room id you would like to join:</h4>\r\n          <MyInput />\r\n        </div>\r\n        <div>\r\n          <div className=\"refresh-row\">\r\n            <h4>Otherwise, click on one of the available rooms to join.</h4>\r\n            <IconButton color=\"primary\" aria-label=\"refresh\" \r\n              onClick={getAvailableRooms}>\r\n              <RefreshIcon />\r\n            </IconButton>\r\n          </div>\r\n          <Grid container spacing={3} className=\"rooms-wrapper\">\r\n            { renderAvailableRooms(rooms, isLoadingRoom) }\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst SubscribedRoomInfo = connect(mapStateToPropsRI)(RoomInfo);\r\nexport default SubscribedRoomInfo;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Loading from 'components/Loading/loading';\r\nimport { setSelectedChoice, setIsLoadingRoom } from 'redux/actions/gameActions';\r\nimport { createRoom, getAvailableRooms } from '../socketHandlers';\r\n\r\nconst CREATE = 'create';\r\nconst JOIN = 'join';\r\n\r\nfunction setDisableProps(obj) {\r\n  obj.className += \" disabled\";\r\n  obj.variant = \"outlined\";\r\n}\r\n\r\nfunction ConnectedChoices(props) {\r\n  const { isConnected, selectedChoice, handleSelect } = props;\r\n  if (!isConnected) { return <Loading />; }\r\n\r\n  const createButtonProps = {\r\n    variant: \"contained\",\r\n    className: \"button\",\r\n    onClick: () => handleSelect(CREATE),\r\n  };\r\n  const joinButtonProps = {\r\n    variant: \"contained\",\r\n    className: \"button\",\r\n    onClick: () => handleSelect(JOIN),\r\n  };\r\n\r\n\r\n  if (selectedChoice === CREATE) {\r\n    setDisableProps(joinButtonProps);\r\n    delete createButtonProps.onClick;\r\n    createButtonProps.disableRipple = true;\r\n  }\r\n  else if (selectedChoice === JOIN) {\r\n    setDisableProps(createButtonProps);\r\n    delete joinButtonProps.onClick;\r\n    joinButtonProps.disableRipple = true;\r\n  }\r\n  return (\r\n    <div className=\"connected-choices\">\r\n      <Button \r\n        color=\"primary\"\r\n        disableElevation\r\n        {...createButtonProps}\r\n        >Create Room</Button>\r\n      <Button \r\n        color=\"primary\"\r\n        disableElevation\r\n        {...joinButtonProps}\r\n        >Join Room</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToPropsCC(state) {\r\n  const gd = state.gameData;\r\n  return {\r\n    isConnected: gd.isConnected,\r\n    selectedChoice: gd.selectedChoice\r\n  }\r\n}\r\n\r\nfunction mapDispatchToPropsCC(dispatch) {\r\n  return {\r\n    handleSelect: (e) => {\r\n      dispatch(setSelectedChoice(e));\r\n      dispatch(setIsLoadingRoom(true));\r\n      if(e === CREATE) {\r\n        createRoom();\r\n      }\r\n      else if(e === JOIN) {\r\n        getAvailableRooms();\r\n      }\r\n    }\r\n  }\r\n}\r\nconst SubscribedConnectedChoices = connect(mapStateToPropsCC, mapDispatchToPropsCC)(ConnectedChoices);\r\nexport default SubscribedConnectedChoices;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nimport './waitingRoom.scss';\r\n\r\nimport RoomInfo from './roomInfo';\r\nimport ConnectedChoices from './connectedChoices';\r\nimport { connectToServer } from '../socketHandlers';\r\nimport store from 'redux/store';\r\n\r\nconst storageType = sessionStorage;\r\n\r\nfunction mapStateToPropsWR(state) {\r\n  const { gamename, username } = state.gameCredentials\r\n  return {\r\n    gamename,\r\n    username,\r\n    isPlaying: state.gameData.isPlaying,\r\n  };\r\n}\r\n\r\nfunction WaitingRoom(props) {\r\n  const { gamename, username, isPlaying } = props;\r\n  const { location } = props;\r\n\r\n  useEffect(() => {\r\n    connectToServer();\r\n    document.title= \"Waiting Room\";\r\n  },[]);\r\n\r\n  if (isPlaying) {\r\n    storageType.setItem('gameData', JSON.stringify(store.getState().gameData));\r\n    return (\r\n      <Redirect to={`${location.pathname}/play`} />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"wrapper waiting-room-wrapper\">\r\n      <div className=\"header-text\">\r\n        <h1>Play {gamename}</h1>\r\n        <h3>Your name is: {username}</h3>\r\n      </div>\r\n      <ConnectedChoices />\r\n\r\n      <RoomInfo\r\n        username={username}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nconst SubscribedWaitingRoom = connect(mapStateToPropsWR)(WaitingRoom);\r\nexport default SubscribedWaitingRoom;","/*eslint-disable*/\r\nimport React from 'react';\r\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport Testing from 'pages/testing'\r\nimport MainPage from 'pages/MainPage/mainPage';\r\nimport Games from 'pages/Games/games';\r\nimport { Spyfall } from 'pages/Games/Spyfall';\r\nimport WaitingRoom from 'pages/Games/WaitingRoom/waitingRoom';\r\nimport NavBar from 'components/NavBar/navbar';\r\nimport store from 'redux/store';\r\n\r\nimport './App.css';\r\n\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport green from '@material-ui/core/colors/green';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: blue,\r\n    secondary: green,\r\n  },\r\n  status: {\r\n    danger: 'orange',\r\n  },\r\n});\r\n\r\n\r\n// function ComebackGame(props) {\r\n//   const { match: {params}} = props;\r\n//   return <div>\r\n//     <h1>\r\n//       <span style={{textTransform: \"uppercase\"}}>{params.name}</span> is not yet built. Come back soon.\r\n//       </h1>\r\n//   </div>;\r\n// }\r\n\r\nfunction App() {  \r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n    <Provider store={store}>\r\n    <HashRouter basename=\"/\">\r\n        <Switch>\r\n          <Route exact path=\"/\" component={MainPage} />\r\n          <Route path=\"/testing\" component={Testing} /> \r\n          <Route path=\"/testcomponent\" component={NavBar} />\r\n\r\n          <Route path=\"/games/spyfall/play\" component={Spyfall} />\r\n          <Route path=\"/games/:name\" component={WaitingRoom} />\r\n          \r\n          <Route path=\"/games\" component={Games} />\r\n\r\n          <Route>\r\n            <Redirect to=\"/\" />\r\n          </Route>\r\n        </Switch>\r\n    </HashRouter>\r\n    </Provider>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}