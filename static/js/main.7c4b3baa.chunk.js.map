{"version":3,"sources":["components/Loading/loading.jsx","pages/testing.jsx","pages/MainPage/mainPage.jsx","redux-store/reducers/nameReducers.js","redux-store/actions/gameSetupActions.js","redux-store/reducers/gameReducers.js","redux-store/actions/SpecificGameActions/spyfallGameActions.js","redux-store/actions/spyfallActions.js","redux-store/reducers/playReducers.js","redux-store/reducers/index.js","redux-store/actions/nameActions.js","redux-store/index.js","pages/games.jsx","Games/socketHandlers.js","components/BackToLobby/backToLobby.jsx","Games/Spyfall/spyfall.jsx","Games/Spyfall/index.jsx","components/BackToGameSelect/backToGameSelect.jsx","Games/WaitingRoom/RoomInfoComponents/myInput.jsx","Games/Settings/privateSwitch.jsx","Games/Settings/SpyfallSettings/spyfallSettings.jsx","Games/WaitingRoom/RoomInfoComponents/submitSettings.jsx","Games/Settings/SpyfallSettings/spyfallView.jsx","Games/Settings/settingsBoard.jsx","Games/WaitingRoom/roomInfo.jsx","Games/WaitingRoom/connectedChoices.jsx","Games/WaitingRoom/waitingRoom.jsx","App.js","serviceWorker.js","index.js"],"names":["Loading","className","MainPage","useState","count","setCount","email","setEmail","number","setNumber","imageName","setImageName","useEffect","a","fetch","method","headers","then","res","json","image","response","document","title","fetchData","onClick","type","value","onChange","e","target","src","alt","to","storageType","sessionStorage","initialState","username","gamename","userId","getItem","uuid","setItem","existUserId","lobbyStates","setIsConnected","isConnected","process","REACT_APP_DESIGN","selectedChoice","isLoadingRoom","numPlayers","host","members","roomId","myIndex","rooms","isPlaying","isUpdating","settings","isPrivate","spyfall","time","spyfallGameDataReducer","state","action","Object","assign","addLocationSpyfall","data","innerHTML","removeLocationSpyfall","addNameSpyfall","index","removeNameSpyfall","selectedLocations","Set","selectedNamesByIndex","spyIndex","locations","secretLocation","combineReducers","gameCredentials","gameData","game","hostname","length","newSettings","deletedIndex","newState","slice","filter","m","initialGameState","playState","gameState","clonedLocations","add","delete","clonedNames","defaultState","initialGameData","initialGameCredentialState","initialPlayState","store","createStore","MohiApp","JSON","parse","myState","loadState","saveState","allGames","Games","getState","name","setName","redirectPage","setRedirectPage","validateName","isInvalid","msg","Boolean","dispatch","push","TextField","error","required","id","label","variant","helperText","map","val","Button","key","color","disabled","socket","connectToServer","console","log","uid","newSocket","io","connect","reconnection","reconnectionDelay","reconnectionDelayMax","reconnectionAttempts","on","updateSpyfallTime","addSpyfallEventListeners","emit","roomInfo","roomSettingsUpdated","startSpyfall","playerLeft","getAvailableRooms","Error","ejectFromRoom","joinRoom","targetRoom","trim","startGame","goBack","returnToLobby","BackToLobby","IconButton","aria-label","Spyfall","gd","ps","isSpy","props","getValues","obj","getSelectedClassN","set","addCall","removeCall","isSelected","has","callback","selectClass","headerRow","role","minutes","Math","floor","seconds","toString","padStart","renderTime","getSelectedClassL","BackToGameSelect","TextInput","setRoomId","submit","FormControl","InputLabel","htmlFor","OutlinedInput","onKeyPress","which","keyCode","endAdornment","InputAdornment","position","children","onMouseDown","preventDefault","edge","labelWidth","SubscribedPrivateSwitch","handleSwitch","Switch","checked","inputProps","isValidTime","test","Number","parseInt","SubscribedTimeLimit","handleSpyfallTime","Input","FormHelperText","SpyfallSettings","showPrivacy","SubscribedSubmitSettings","isUpdatings","setIsUpdating","isValid","context","isValidSpyfall","validateSettings","isCreating","createRoomWithSettings","updateRoomSettings","SubscribedSpyfallView","SubscribedSettingsBoard","GameView","GameSettings","canEdit","Paper","renderStatusMessage","SpyfallView","SubscribedRoomInfo","Grid","container","spacing","room","item","xs","renderAvailableRooms","hostClass","navigator","clipboard","writeText","numMembers","renderStartButton","renderMembers","setDisableProps","SubscribedConnectedChoices","handleSelect","createButtonProps","joinButtonProps","disableRipple","disableElevation","SubscribedWaitingRoom","location","stringify","pathname","theme","createMuiTheme","palette","primary","blue","secondary","green","status","danger","App","ThemeProvider","basename","exact","path","component","Testing","WaitingRoom","window","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7c4b3baa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './loading.scss';\r\n\r\nexport default function Loading() {\r\n  return (\r\n    <div className=\"lds-ripple\">\r\n      <div />\r\n      <div />\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Loading from 'components/Loading/loading';\r\n\r\nexport default function MainPage() {\r\n  const [count, setCount] = useState(0);\r\n  const [email, setEmail] = useState('');\r\n\r\n  const [number, setNumber] = useState(1);\r\n\r\n  const [imageName, setImageName] = useState('');\r\n\r\n  useEffect( () => {\r\n    document.title = \"MohiTheFish\"\r\n    async function fetchData() {\r\n        \r\n      const response = await fetch(\"https://cors-anywhere.herokuapp.com/https://randomfox.ca/floof/?ref=apilist.fun\", \r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          'content-type': 'application/json'\r\n        }\r\n      }).then(res => res.json())\r\n      .then(res => {\r\n        setImageName(res.image);\r\n      });\r\n      return response;\r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n  const handleChange = (e) => {\r\n    setEmail(e.target.value);\r\n  }\r\n  return (\r\n    <div>\r\n      This page is being used to test new features.\r\n      <div>\r\n        <p>You clicked {count} times</p>\r\n        <button onClick={() => setCount(count+1)}>\r\n          Click me\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <input type='text' value={email} onChange={handleChange} />\r\n      </div>\r\n      <div>\r\n        <h1>Pick a movie</h1>\r\n        <select value={number} onChange={e => setNumber(e.target.value)}>\r\n          <option value=\"1\">1</option>\r\n          <option value=\"2\">2</option>\r\n          <option value=\"3\">3</option>\r\n          <option value=\"4\">4</option>\r\n          <option value=\"5\">5</option>\r\n          <option value=\"6\">6</option>\r\n        </select>\r\n      </div>\r\n\r\n      { imageName === '' ? <Loading /> : <img src={imageName} alt=\"A fox\" />}\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './mainPage.scss';\r\n\r\nexport default function MainPage() {\r\n  return (\r\n    <div className=\"main-page-wrapper\">\r\n      <div className=\"intro\">\r\n        <h1>Muhammed Imran</h1>\r\n        <h2>MohiTheFish</h2>\r\n\r\n        <Link to=\"/games\">Click me to see some games.</Link> \r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}","import {\r\n  SET_GAME_USERNAME,\r\n  RETURN_TO_GAME_SELECT\r\n} from '../actions/nameActions';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nconst storageType = sessionStorage;\r\n\r\nfunction existUserId() {\r\n  let a = storageType.getItem('userId');\r\n\r\n  if(a) {return a;}\r\n\r\n  a = uuid();\r\n  storageType.setItem('userId', a);\r\n  return a;\r\n}\r\n\r\nexport const initialState = {\r\n  username: \"\",\r\n  gamename: \"\",\r\n  userId: existUserId(),\r\n};\r\n\r\nexport function gameCredentials(state = initialState, action) {\r\n  switch(action.type) {\r\n    case SET_GAME_USERNAME: {\r\n      return {\r\n        username: action.username,\r\n        gamename: action.gamename,\r\n        userId: state.userId,\r\n      }\r\n    }\r\n    case RETURN_TO_GAME_SELECT: {\r\n      return {\r\n        gamename: \"\",\r\n        username: state.username,\r\n        userId: state.userId,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}","export const SET_IS_CONNECTED = 'SET_IS_CONNECTED'; \r\nexport const SET_IS_LOADINGROOM = 'SET_IS_LOADINGROOM';\r\nexport const SET_IS_LOADING_ROOM_SELECTED_CHOICE = \"SET_IS_LOADING_ROOM_SELECTED_CHOICE\";\r\nexport const SET_HOST_NAME = \"SET_HOST_NAME\";\r\nexport const ROOM_CREATED = \"ROOM_CREATED\";\r\nexport const ROOM_MEMBERS_UPDATED = \"ROOM_MEMBERS_UPDATED\";\r\nexport const SET_SETTINGS_IS_UPDATING = \"SET_SETTINGS_IS_UPDATING\";\r\nexport const ROOM_SETTINGS_UPDATED = \"ROOM_SETTINGS_UPDATED\";\r\nexport const VISIBLE_ROOMS = \"VISIBLE_ROOMS\";\r\nexport const ROOM_JOINED = \"ROOM_JOINED\";\r\nexport const PLAYER_LEFT = \"PLAYER_LEFT\";\r\nexport const START_PLAYING = \"START_PLAYING\";\r\nexport const SET_IS_PRIVATE = \"SET_IS_PRIVATE\";\r\nexport const GO_BACK_TO_LOBBY = \"GO_BACK_TO_LOBBY\";\r\nexport const CLEAR_ROOM_INFO = \"CLEAR_ROOM_INFO\";\r\n\r\nexport const lobbyStates = {\r\n  CREATE: \"create\",\r\n  JOIN: \"join\",\r\n  CREATED: \"created\",\r\n  JOINED: \"joined\",\r\n};\r\n\r\nexport function setIsConnected(isConnected) {\r\n  return {\r\n    type: SET_IS_CONNECTED,\r\n    isConnected,\r\n  };\r\n}\r\n\r\nexport function setSelectedChoiceAndLoadingRoom(selectedChoice) {\r\n  return {\r\n    type: SET_IS_LOADING_ROOM_SELECTED_CHOICE,\r\n    isConnected: true,\r\n    selectedChoice,\r\n  }\r\n}\r\n\r\nexport function setIsLoadingRoom(isLoadingRoom) {\r\n  return {\r\n    type: SET_IS_LOADINGROOM,\r\n    isLoadingRoom,\r\n  };\r\n}\r\n\r\nexport function setHostName(host) {\r\n  return {\r\n    type: SET_HOST_NAME,\r\n    host,\r\n  }\r\n}\r\n\r\nexport function roomCreated(data) {\r\n  return {\r\n    type: ROOM_CREATED,\r\n    data,\r\n  };\r\n}\r\n\r\nexport function roomUpdated(data) {\r\n  return {\r\n    type: ROOM_MEMBERS_UPDATED,\r\n    data,\r\n  };\r\n}\r\n\r\nexport function setSettingsIsUpdating() {\r\n  return {\r\n    type: SET_SETTINGS_IS_UPDATING,\r\n  };\r\n}\r\n\r\nexport function roomSettingsUpdated(settings) {\r\n  return {\r\n    type: ROOM_SETTINGS_UPDATED,\r\n    settings,\r\n  };\r\n}\r\n\r\nexport function visibleRooms(data) {\r\n  return {\r\n    type: VISIBLE_ROOMS,\r\n    data,\r\n  }\r\n}\r\n\r\nexport function roomJoined(data) {\r\n  return {\r\n    type: ROOM_JOINED,\r\n    data,\r\n  }\r\n}\r\n\r\nexport function playerLeft(index) {\r\n  return {\r\n    type: PLAYER_LEFT,\r\n    index,\r\n  };\r\n}\r\n\r\nexport function startPlaying() {\r\n  return {\r\n    type: START_PLAYING,\r\n    isPlaying: true,\r\n  }\r\n}\r\n\r\nexport function roomPrivacyToggled() {\r\n  return {\r\n    type: SET_IS_PRIVATE,\r\n  };\r\n}\r\n\r\nexport function goBackToLobby() {\r\n  return {\r\n    type: GO_BACK_TO_LOBBY,\r\n  };\r\n}\r\n\r\nexport function clearRoomInfo() {\r\n  return {\r\n    type: CLEAR_ROOM_INFO,\r\n  };\r\n}","import {\r\n  SET_IS_CONNECTED,\r\n  SET_IS_LOADINGROOM,\r\n  SET_HOST_NAME,\r\n  ROOM_CREATED,\r\n  VISIBLE_ROOMS,\r\n  ROOM_MEMBERS_UPDATED,\r\n  ROOM_JOINED,\r\n  PLAYER_LEFT,\r\n  START_PLAYING,\r\n  SET_IS_PRIVATE,\r\n  SET_IS_LOADING_ROOM_SELECTED_CHOICE,\r\n  GO_BACK_TO_LOBBY,\r\n  lobbyStates,\r\n  ROOM_SETTINGS_UPDATED,\r\n  SET_SETTINGS_IS_UPDATING,\r\n  CLEAR_ROOM_INFO,\r\n} from '../actions/gameSetupActions';\r\n\r\nimport {\r\n  SET_SPYFALL_TIME\r\n} from '../actions/SpecificGameActions/spyfallGameActions';\r\n\r\nexport const initialState = process.env.REACT_APP_DESIGN === 'true' \r\n? {\r\n  isConnected: true,\r\n  selectedChoice: lobbyStates.CREATED,\r\n  isLoadingRoom: false,\r\n  numPlayers: 4,\r\n  host: \"Mohitheifhs\",\r\n  members: [\"other guy\", \"nobody\"],\r\n  roomId: \"fwef98c09we-89w-efcab-aew-9gfw\",\r\n  myIndex: -1,\r\n  rooms: [],\r\n  isPlaying: false,\r\n  isUpdating: false,\r\n  settings: {\r\n    isPrivate: true,\r\n    spyfall: {\r\n      time: \"8\", // minutes\r\n    }\r\n  }\r\n}\r\n: {\r\n  isConnected: false,\r\n  selectedChoice: \"\",\r\n  isLoadingRoom: false,\r\n  numPlayers: 1,\r\n  host: \"\",\r\n  members: [],\r\n  roomId: \"\",\r\n  myIndex: -1,\r\n  rooms: [],\r\n  isPlaying: false,\r\n  isUpdating: false,\r\n  settings: {\r\n    isPrivate: true,\r\n    spyfall: {\r\n      time: \"8\", // minutes\r\n    }\r\n  }\r\n}\r\n\r\nfunction spyfallGameDataReducer(state, action) {\r\n  switch(action.type) {\r\n    case SET_SPYFALL_TIME: {\r\n      return Object.assign({}, state, {\r\n        settings: {\r\n          ...state.settings,\r\n          spyfall: {\r\n            ...state.settings.spyfall,\r\n            time: action.time,\r\n          }\r\n        }\r\n      })\r\n    }\r\n    default: return state;\r\n  }\r\n}\r\n\r\nexport function gameData(state = initialState, action) {\r\n  switch(action.game) {\r\n    case 'spyfall': return spyfallGameDataReducer(state, action);\r\n    default: break;\r\n  }\r\n  switch(action.type) {\r\n    case SET_IS_CONNECTED:\r\n      return Object.assign({}, state, {\r\n        isConnected: action.isConnected\r\n      });\r\n    case SET_IS_LOADING_ROOM_SELECTED_CHOICE: {\r\n      return Object.assign({}, state, {\r\n        isConnected: action.isConnected,\r\n        selectedChoice: action.selectedChoice,\r\n      });\r\n    }\r\n    case SET_IS_LOADINGROOM:\r\n      return Object.assign({}, state, {\r\n        isLoadingRoom: action.isLoadingRoom\r\n      });\r\n    case SET_HOST_NAME:\r\n      return Object.assign({}, state, {\r\n        host: action.host\r\n      });\r\n    case ROOM_CREATED: {\r\n      const { hostname, members, roomId } = action.data;\r\n      return Object.assign({}, state, {\r\n        host: hostname,\r\n        members: members,\r\n        roomId: roomId,\r\n        myIndex: members.length-1,\r\n        selectedChoice: lobbyStates.CREATED,\r\n      });\r\n    }\r\n    case ROOM_MEMBERS_UPDATED: {\r\n      const { hostname, members, roomId } = action.data;\r\n      return Object.assign({}, state, {\r\n        host: hostname,\r\n        members: members,\r\n        roomId: roomId,\r\n        myIndex: state.myIndex,\r\n      });\r\n    }\r\n    case ROOM_SETTINGS_UPDATED: {\r\n      const newSettings = action.settings.settings;\r\n\r\n      return Object.assign({}, state, {\r\n        settings: newSettings,\r\n        isUpdating: false,\r\n      });\r\n    }\r\n    case SET_SETTINGS_IS_UPDATING: {\r\n      return Object.assign({}, state, {\r\n        isUpdating: true,\r\n      });\r\n    }\r\n    case VISIBLE_ROOMS: {\r\n      return Object.assign({}, state, {\r\n        rooms: action.data.rooms,\r\n        isLoadingRoom: false, \r\n      });\r\n    }\r\n    case ROOM_JOINED: {\r\n      const { hostname, members, roomId, settings: newSettings } = action.data;\r\n      return Object.assign({}, state, {\r\n        host: hostname,\r\n        members: members,\r\n        roomId: roomId,\r\n        myIndex: members.length-1,\r\n        selectedChoice: lobbyStates.JOINED,\r\n        settings: newSettings,\r\n      });\r\n    }\r\n    case PLAYER_LEFT: {\r\n      const { members, myIndex } = state;\r\n      const { index: deletedIndex } = action;\r\n      const newState = {\r\n        myIndex,\r\n        members: [],\r\n      };\r\n      // If host left\r\n      if (deletedIndex === -1) {\r\n        newState.members = members.slice(1);\r\n        newState.myIndex -= 1;\r\n        // If I am now the host\r\n        if (newState.myIndex === -1) {\r\n          newState.selectedChoice = lobbyStates.CREATED;\r\n        }\r\n        newState.host = members[0];\r\n      }\r\n      else {\r\n        if (deletedIndex < myIndex) {\r\n          newState.myIndex -= 1;\r\n        }\r\n        newState.members =  members.filter((m, index) => (index !== deletedIndex) );\r\n      }\r\n      return Object.assign({}, state, newState);\r\n    }\r\n    case START_PLAYING: {\r\n      return Object.assign({}, state, {\r\n        isPlaying: true,\r\n        initialGameState: action.initialGameState\r\n      });\r\n    }\r\n    case GO_BACK_TO_LOBBY: {\r\n      return Object.assign({}, state, {\r\n        isPlaying: false,\r\n      });\r\n    }\r\n    case SET_IS_PRIVATE: {\r\n      return Object.assign({}, state, {\r\n        settings: {\r\n          ...state.settings,\r\n          isPrivate: !state.settings.isPrivate\r\n        }\r\n      });\r\n    }\r\n    case CLEAR_ROOM_INFO: {\r\n      return Object.assign({}, state, {\r\n        isConnected: state.isConnected,\r\n        selectedChoice: \"\",\r\n        isLoadingRoom: false,\r\n        numPlayers: 1,\r\n        host: \"\",\r\n        members: [],\r\n        roomId: \"\",\r\n        myIndex: -1,\r\n        rooms: [],\r\n        isPlaying: false,\r\n        isUpdating: false,\r\n        settings: {\r\n          isPrivate: true,\r\n          spyfall: {\r\n            time: \"8\", // minutes\r\n          }\r\n        }\r\n      })\r\n    }\r\n    default:\r\n      return state;\r\n  } \r\n}","export const SET_SPYFALL_TIME = \"SET_SPYFALL_TIME\";\r\nexport const MAX_SPYFALL_TIME = 100;\r\n\r\nexport function setSpyfallTime(time) {\r\n  return {\r\n    game: 'spyfall',\r\n    type: SET_SPYFALL_TIME,\r\n    time,\r\n  };\r\n}","export const START_GAME_SPYFALL = \"START_GAME_SPYFALL\";\r\nexport const UPDATE_SPYFALL_TIME = \"UDPATE_SPYFALL_TIME\";\r\nexport const ADD_LOCATION_SPYFALL = \"ADD_LOCATION_SPYFALL\";\r\nexport const REMOVE_LOCATION_SPYFALL = \"REMOVE_LOCATION_SPYFALL\";\r\nexport const ADD_NAME_SPYFALL = \"ADD_NAME_SPYFALL\";\r\nexport const REMOVE_NAME_SPYFALL = \"REMOVE_NAME_SPYFALL\";\r\n\r\nexport function startSpyfall(gameState) {\r\n  return {\r\n    type: START_GAME_SPYFALL,\r\n    gameState, \r\n  };\r\n}\r\n\r\nexport function updateSpyfallTime(time) {\r\n  return {\r\n    type: UPDATE_SPYFALL_TIME,\r\n    time,\r\n  };\r\n}\r\n\r\nexport function addLocationSpyfall(e) {\r\n  return {\r\n    type: ADD_LOCATION_SPYFALL,\r\n    data: e.target.innerHTML,\r\n  };\r\n}\r\n\r\nexport function removeLocationSpyfall(e) {\r\n  return {\r\n    type: REMOVE_LOCATION_SPYFALL,\r\n    data: e.target.innerHTML,\r\n  };\r\n}\r\n\r\nexport function addNameSpyfall(index) {\r\n  return {\r\n    type: ADD_NAME_SPYFALL,\r\n    data: index,\r\n  };\r\n}\r\n\r\nexport function removeNameSpyfall(index) {\r\n  return {\r\n    type: REMOVE_NAME_SPYFALL,\r\n    data: index,\r\n  };\r\n}","import {\r\n  ADD_LOCATION_SPYFALL,\r\n  REMOVE_LOCATION_SPYFALL,\r\n  ADD_NAME_SPYFALL,\r\n  REMOVE_NAME_SPYFALL,\r\n  START_GAME_SPYFALL,\r\n  UPDATE_SPYFALL_TIME,\r\n} from 'redux-store/actions/spyfallActions';\r\n\r\nexport const initialState = {\r\n  time: 0,\r\n  spyfall: {\r\n    selectedLocations: new Set(),\r\n    selectedNamesByIndex: new Set(),\r\n    spyIndex: 0,\r\n    locations: [],\r\n    secretLocation: \"\",\r\n  },\r\n};\r\n\r\nexport function playState(state = initialState, action) {\r\n  switch(action.type) {\r\n    case START_GAME_SPYFALL: {\r\n      return {\r\n        time: action.gameState.time,\r\n        spyfall: {\r\n          spyIndex: action.gameState.spyIndex,\r\n          selectedLocations: state.spyfall.selectedLocations,\r\n          selectedNamesByIndex: state.spyfall.selectedNamesByIndex,\r\n          locations: action.gameState.locations,\r\n          secretLocation: action.gameState.secretLocation,\r\n        }\r\n      };\r\n    }\r\n    case UPDATE_SPYFALL_TIME: {\r\n      return {\r\n        time: action.time,\r\n        spyfall: state.spyfall,\r\n      };\r\n    }\r\n    case ADD_LOCATION_SPYFALL: {\r\n      const {selectedLocations} = state.spyfall;\r\n      const clonedLocations = new Set(selectedLocations);\r\n      clonedLocations.add(action.data);\r\n      return Object.assign({}, state, {\r\n        spyfall: {\r\n          ...state.spyfall,\r\n          selectedLocations: clonedLocations,\r\n        }\r\n      });\r\n    }\r\n    case REMOVE_LOCATION_SPYFALL: {\r\n      const {selectedLocations} = state.spyfall;\r\n      const clonedLocations = new Set(selectedLocations);\r\n      clonedLocations.delete(action.data);\r\n      return Object.assign({}, state, {\r\n        spyfall: {\r\n          ...state.spyfall,\r\n          selectedLocations: clonedLocations,\r\n        }\r\n      });\r\n    }\r\n    case ADD_NAME_SPYFALL: {\r\n      const {selectedNamesByIndex} = state.spyfall;\r\n      const clonedNames = new Set(selectedNamesByIndex);\r\n      clonedNames.add(action.data);\r\n      return Object.assign({}, state, {\r\n        spyfall: {\r\n          ...state.spyfall,\r\n          selectedNamesByIndex: clonedNames,\r\n        }\r\n      });\r\n    }\r\n    case REMOVE_NAME_SPYFALL: {\r\n      const {selectedNamesByIndex} = state.spyfall;\r\n      const clonedNames = new Set(selectedNamesByIndex);\r\n      clonedNames.delete(action.data);\r\n      return Object.assign({}, state, {\r\n        spyfall: {\r\n          ...state.spyfall,\r\n          selectedNamesByIndex: clonedNames,\r\n        }\r\n      });\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from 'redux';\r\nimport { gameCredentials } from './nameReducers';\r\nimport { gameData } from './gameReducers';\r\nimport { playState } from './playReducers';\r\nexport default combineReducers({\r\n  gameCredentials,\r\n  gameData,\r\n  playState,\r\n});\r\n","export const SET_GAME_USERNAME = \"SET_GAME_USERNAME\";\r\nexport const RETURN_TO_GAME_SELECT = \"RETURN_TO_GAME_SELECT\"; \r\n\r\nexport function setGameUsername(data) {\r\n  return {\r\n    type: SET_GAME_USERNAME,\r\n    username: data.username,\r\n    gamename: data.gamename,\r\n  };\r\n}\r\n\r\nexport function returnToGameSelect() {\r\n  return {\r\n    type: RETURN_TO_GAME_SELECT\r\n  };\r\n}","import { createStore } from 'redux';\r\nimport MohiApp from './reducers';\r\nimport {initialState as initialGameData} from './reducers/gameReducers';\r\nimport {initialState as initialGameCredentialState} from './reducers/nameReducers';\r\nimport {initialState as initialPlayState} from './reducers/playReducers';\r\n\r\n/**\r\n * REDUX WORK FLOW\r\n * 1) Create an action. Follow the schema already defined.\r\n *  (Create a constant action type. Setup the data to be passed to reducer)\r\n * 2) Add to the reducer. Follow the schema already defined. \r\n *  (Make sure to return an object that has all keys as before.)\r\n * 3) You may now *dispatch* an action from anywhere.\r\n *  (Note: component must *subscribe* via the connect method in order to be refreshed)\r\n * Maybe 4) Sometimes you may want to create a whole separate data flow. Simply create the relevant files\r\n *  and then make sure to update this default state to include those changes. \r\n */\r\nconst defaultState = {\r\n  gameData: initialGameData,\r\n  gameCredentials: initialGameCredentialState,\r\n  playState: initialPlayState,\r\n};\r\n// console.log(defaultState);\r\nexport const storageType = sessionStorage;\r\n\r\nfunction loadState() {\r\n  const gameData = JSON.parse(storageType.getItem('gameData'));\r\n  const username = storageType.getItem('username');\r\n  const gamename = storageType.getItem('gamename');\r\n  const userId = storageType.getItem('userId');\r\n\r\n  if (!username || !gamename || !userId) {\r\n    return defaultState;\r\n  }\r\n  const myState = {};\r\n  myState.gameCredentials = {\r\n    username,\r\n    gamename,\r\n    userId,\r\n  }\r\n\r\n  if (gameData && gameData.isPlaying) {\r\n    myState.gameData = gameData;\r\n  }\r\n  else {\r\n    myState.gameData = initialGameData;\r\n  }\r\n\r\n  myState.playState = initialPlayState;\r\n\r\n  return myState;\r\n}\r\n\r\nconst store = createStore(MohiApp, loadState());\r\n// console.log(store.getState());\r\n\r\nexport function saveState(state) {\r\n  const { username, gamename, userId } = state.gameCredentials;\r\n  storageType.setItem('username', username);\r\n  storageType.setItem('gamename', gamename);\r\n  storageType.setItem('userId', userId);\r\n}\r\n\r\nexport function saveCurrentState() {\r\n  saveState(store.getState());\r\n}\r\n\r\n\r\n// store.subscribe(() => {\r\n//   console.log(store.getState());\r\n// })\r\nexport default store;","import React, { useState, useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport store, { saveState } from 'redux-store';\r\nimport {\r\n  setGameUsername\r\n} from 'redux-store/actions/nameActions';\r\n\r\nimport './games.scss';\r\n\r\nconst allGames = [\r\n  'spyfall',\r\n];\r\n\r\n\r\nfunction validateName(name) {\r\n  if (!name) {\r\n    return [true, 'Name cannot be empty.'];\r\n  }\r\n  return [false, \"\"];\r\n}\r\n\r\n\r\nexport default function Games() {\r\n  const [name, setName] = useState(store.getState().gameCredentials.username);\r\n  const [redirectPage, setRedirectPage] = useState(\"\");\r\n\r\n  useEffect ( () => {\r\n    document.title = \"Games\";\r\n  }, []);\r\n\r\n  function handleChange(e) {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  /**\r\n   * @todo Look into creating the component as soon as the link is pressed.\r\n   */\r\n  const [isInvalid, msg] = validateName(name);\r\n  if (Boolean(redirectPage) && !isInvalid) {\r\n    store.dispatch(setGameUsername({\r\n      username: name,\r\n      gamename: redirectPage,\r\n    }));\r\n\r\n    saveState(store.getState());\r\n    return (\r\n     <Redirect push to={`/games/${redirectPage}`}/>\r\n   );\r\n  }\r\n  return (\r\n    <div className=\"games-page-wrapper\">\r\n      <h1 className=\"header\">Games</h1>\r\n      <h3 className=\"input-message\">Please create your username before continuing.</h3>\r\n      <div className=\"input\">\r\n        <TextField\r\n          error={isInvalid}\r\n          required\r\n          id=\"filled-required\"\r\n          label=\"Required\"\r\n          variant=\"filled\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          helperText={msg}\r\n        />\r\n      </div>\r\n\r\n\r\n      <div className=\"buttons-wrapper\">\r\n        {\r\n          allGames.map(val =>\r\n            <Button \r\n              key={val}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              disabled={isInvalid}\r\n              onClick={() => setRedirectPage(val)}\r\n            >\r\n              {val}\r\n            </Button>\r\n          )\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}","import io from 'socket.io-client';\r\nimport store from 'redux-store';\r\n\r\nimport {\r\n  setIsConnected,\r\n  setIsLoadingRoom,\r\n  roomCreated,\r\n  roomUpdated,\r\n  visibleRooms,\r\n  roomJoined,\r\n  playerLeft,\r\n  startPlaying,\r\n  roomPrivacyToggled,\r\n  goBackToLobby,\r\n  roomSettingsUpdated,\r\n} from 'redux-store/actions/gameSetupActions';\r\n\r\nimport {\r\n  startSpyfall,\r\n  updateSpyfallTime,\r\n} from 'redux-store/actions/spyfallActions';\r\n\r\nfunction addSpyfallEventListeners(newSocket) {\r\n  newSocket.on('timeUpdate', function(time) {\r\n    store.dispatch(updateSpyfallTime(time));\r\n  });\r\n}\r\n\r\nvar socket = null;\r\nlet userId = null;\r\n\r\nexport function connectToServer() {\r\n  console.log('connecting...');\r\n  const {username, gamename, userId: uid} = store.getState().gameCredentials;\r\n  userId = uid;\r\n  \r\n  let a = `http://localhost:5000/${gamename}`;\r\n  const newSocket = io.connect(a, {\r\n    reconnection: true,\r\n    reconnectionDelay: 1000,\r\n    reconnectionDelayMax : 5000,\r\n    reconnectionAttempts: 10,\r\n  });\r\n\r\n  if(gamename === 'spyfall') {\r\n    addSpyfallEventListeners(newSocket);\r\n  }\r\n\r\n\r\n  newSocket.on('connect', function() {\r\n    console.log('The client connected');\r\n    socket = newSocket;\r\n\r\n    newSocket.emit('initialConnection', {\r\n      username,\r\n      gamename,\r\n      userId,\r\n    });\r\n    store.dispatch(setIsConnected(true));\r\n  });\r\n\r\n  newSocket.on('createdRoom', function(roomInfo){\r\n    store.dispatch(roomCreated({\r\n      hostname: roomInfo.hostname,\r\n      roomId: roomInfo.roomId,\r\n      members: roomInfo.members,\r\n      isPrivate: roomInfo.isPrivate,\r\n    }));\r\n  });\r\n\r\n  newSocket.on('settingsUpdated', function(settings){\r\n    store.dispatch(roomSettingsUpdated({\r\n      settings,\r\n    }));\r\n  });\r\n  \r\n  newSocket.on('togglePrivate', function(newState){\r\n    store.dispatch(roomPrivacyToggled(newState));\r\n  })\r\n\r\n  newSocket.on('availableRooms', function(rooms) {\r\n    store.dispatch(visibleRooms({\r\n      rooms\r\n    }));\r\n  });\r\n\r\n  newSocket.on('needId', function() {\r\n    console.log('you need an id to access this room!'); \r\n  });\r\n\r\n  newSocket.on('youJoined', function(roomInfo){\r\n    store.dispatch(roomJoined({\r\n      hostname: roomInfo.hostname,\r\n      roomId: roomInfo.roomId, \r\n      members: roomInfo.members,\r\n      settings: roomInfo.settings\r\n    }))\r\n  });\r\n\r\n  newSocket.on('othersJoined', function(roomInfo){\r\n    store.dispatch(roomUpdated({\r\n      hostname: roomInfo.hostname,\r\n      roomId: roomInfo.roomId, \r\n      members: roomInfo.members,\r\n    }));\r\n  })\r\n\r\n  newSocket.on('gameStarted', function(gameState){\r\n    store.dispatch(startSpyfall(gameState));\r\n    store.dispatch(startPlaying(gameState));\r\n  });\r\n\r\n  newSocket.on('sentBackToLobby', function(){\r\n    store.dispatch(goBackToLobby());\r\n  });\r\n\r\n  newSocket.on('playerLeft', function(index) {\r\n    store.dispatch(playerLeft(index));\r\n  });\r\n\r\n  newSocket.on('disconnect', function() {\r\n    socket = null;\r\n    store.dispatch(setIsConnected(false));\r\n  });\r\n}\r\n\r\nexport function isConnected() {\r\n  return !socket;\r\n}\r\n\r\nexport function createRoomWithSettings(settings) {\r\n  if (!socket) { throw new Error('Socket invalid!');}\r\n\r\n  socket.emit('createRoom', [userId, settings]);\r\n}\r\n\r\nexport function updateRoomSettings(settings) {\r\n  if (!socket) { throw new Error('Socket invalid!');}\r\n\r\n  socket.emit('updateSettings', [userId, settings]);\r\n}\r\n\r\nexport function forceDisconnect() {\r\n  if (!socket) { throw new Error('Socket invalid!');}\r\n\r\n  socket.emit('forceDisconnect');\r\n}\r\n\r\nexport function getAvailableRooms() {\r\n  if (!socket) { throw new Error('Socket invalid!');}\r\n\r\n  store.dispatch(setIsLoadingRoom(true));\r\n  socket.emit('getAvailableRooms', userId);\r\n}\r\n\r\nexport function ejectFromRoom() {\r\n  if (!socket) { throw new Error('Socket invalid!');}\r\n  \r\n  socket.emit('ejectPlayerFromRoom', userId);\r\n}\r\n\r\nexport function joinRoom(targetRoom) {\r\n  if (!socket) { throw new Error('Socket invalid!');}\r\n  const data = {\r\n    targetRoom: targetRoom.trim(),\r\n    userId,\r\n  };\r\n  socket.emit('joinRoom', data);\r\n}\r\n\r\nexport function returnToLobby() {\r\n  if (!socket) { throw new Error('Socket invalid!');}\r\n\r\n  socket.emit('returnToLobby', userId);\r\n}\r\n\r\nexport function startGame() {\r\n  if (!socket) { throw new Error('Socket invalid!');}\r\n\r\n  socket.emit('startGame', userId);\r\n}","import React from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\n\r\nimport { returnToLobby } from 'Games/socketHandlers';\r\n\r\nimport './backToLobby.scss';\r\n\r\nfunction goBack() {\r\n  returnToLobby();\r\n}\r\n\r\nfunction BackToLobby() {\r\n  return (\r\n    <div className=\"backToLobby-wrapper\">\r\n      <IconButton aria-label=\"go-back\" color=\"primary\" onClick={goBack}>\r\n        <ArrowBackIcon />\r\n      </IconButton>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BackToLobby;","import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport './spyfall.scss';\r\n\r\nimport BackToLobby from 'components/BackToLobby/backToLobby';\r\n\r\nimport { \r\n  addLocationSpyfall,\r\n  removeLocationSpyfall,\r\n  addNameSpyfall,\r\n  removeNameSpyfall,\r\n} from 'redux-store/actions/spyfallActions';\r\nimport store from 'redux-store';\r\n\r\nfunction mapStateToProps(state) {\r\n  const gd = state.gameData;\r\n  const ps = state.playState;\r\n  const game = ps.spyfall;\r\n  return {\r\n    gameCredentials: state.gameCredentials,\r\n    \r\n    time: ps.time,\r\n    isPlaying: gd.isPlaying,\r\n    selectedLocations: game.selectedLocations,\r\n    selectedNamesByIndex: game.selectedNamesByIndex,\r\n    isSpy: game.spyIndex === gd.myIndex,\r\n    locations: game.locations,\r\n    secretLocation: game.secretLocation,\r\n  };\r\n}\r\nfunction getValues() {\r\n  const gd = store.getState().gameData;\r\n  return {\r\n    host: gd.host,\r\n    members: gd.members,\r\n    myIndex: gd.myIndex,\r\n  };\r\n}\r\nfunction Spyfall(props) {\r\n  const {\r\n    gameCredentials,\r\n    time,\r\n    selectedLocations,\r\n    selectedNamesByIndex,\r\n    isSpy,\r\n    locations,\r\n    secretLocation,\r\n    isPlaying,\r\n  } = props;\r\n  \r\n  const [obj, ] = useState(getValues());\r\n  const {\r\n    host, \r\n    members, \r\n    myIndex\r\n  } = obj;\r\n\r\n\r\n  function getSelectedClassL(val, set, addCall, removeCall) {\r\n    const isSelected = set.has(val);\r\n    let callback = addCall;\r\n    let selectClass = \"\";\r\n    if (isSelected) {\r\n      callback = removeCall;\r\n      selectClass = \"selected\";\r\n    }\r\n    return [selectClass, (data) => store.dispatch(callback(data))];\r\n  }\r\n\r\n  function getSelectedClassN(val, set, addCall, removeCall) {\r\n    const isSelected = set.has(val);\r\n    let callback = addCall;\r\n    let selectClass = \"\";\r\n    if (isSelected) {\r\n      callback = removeCall;\r\n      selectClass = \"selected\";\r\n    }\r\n    return [selectClass, (data) => store.dispatch(callback(val))];\r\n  }\r\n  function renderNames() {\r\n    return members.map( (name, index) => {\r\n      const [selectClass, callback] = getSelectedClassN(index, selectedNamesByIndex, addNameSpyfall, removeNameSpyfall);\r\n      return (\r\n        <h4 key={name}\r\n         className={selectClass}\r\n         onClick={callback}>\r\n          {name}\r\n        </h4>\r\n      )\r\n    })\r\n  }\r\n\r\n  function renderLocations() {\r\n    return locations.map( (value, index) => {\r\n      const [selectClass, callback] = getSelectedClassL(value, selectedLocations, addLocationSpyfall, removeLocationSpyfall);\r\n      return (\r\n        <div\r\n          key={value} \r\n          className={`location vertically-center-text ${selectClass}`}\r\n          onClick={callback}\r\n        > \r\n          <p>{value}</p>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  function renderTime() {\r\n    const minutes = Math.floor(time / 60); \r\n    const seconds = time % 60;\r\n\r\n    return <h3>{minutes}:{seconds.toString().padStart(2, '0')}</h3>\r\n  }\r\n\r\n  const [selectClass, callback] = getSelectedClassN(-1, selectedNamesByIndex, addNameSpyfall, removeNameSpyfall);\r\n  \r\n  const headerRow = myIndex === -1\r\n  ? <div className=\"header-row\">\r\n      <BackToLobby />\r\n      <h1>Play Spyfall</h1>\r\n      {/* <BackToLobby /> */}\r\n    </div>\r\n  : <div className=\"header-row\">\r\n      <h1>Play Spyfall</h1>\r\n    </div>\r\n\r\n  if(!isPlaying) {\r\n    return (\r\n      <Redirect to=\"/games/spyfall\" />\r\n    );\r\n\r\n  }\r\n  return (\r\n    <div className=\"wrapper spyfall-page-wrapper\">\r\n      <div className=\"header\">\r\n        {headerRow}\r\n        <h4>Your name is: {gameCredentials.username}</h4>\r\n          {\r\n            isSpy \r\n            ? <h4>You ARE the spy! <span role=\"img\" aria-label=\"spy emoji\">🕵️</span> <br/> Figure out the secret location!</h4>\r\n            : <h4>You are NOT the spy. <br/> The location is <span className=\"secret-location\">{secretLocation}</span></h4>\r\n          }\r\n      </div>\r\n      <div className=\"time-wrapper\">\r\n        {renderTime()}\r\n      </div>\r\n\r\n      <div className=\"players-list\">\r\n        <h2 className=\"title\">Players</h2>\r\n        <div className=\"names\">\r\n          <h4 key={host}\r\n            className={selectClass}\r\n            onClick={callback}>\r\n              {host}\r\n          </h4>\r\n          {\r\n            renderNames()\r\n          }\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"location-section\">\r\n        <h2 className=\"header\">Locations</h2>\r\n        <div className=\"location-wrapper\">\r\n          {\r\n            renderLocations()\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\nconst SubscribedSpyfall = connect(mapStateToProps)(Spyfall);\r\nexport default SubscribedSpyfall;","import Spyfall from './spyfall';\r\n\r\n\r\nexport default Spyfall;","import React from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport store from 'redux-store';\r\nimport { returnToGameSelect } from 'redux-store/actions/nameActions';\r\n\r\nimport './backToGameSelect.scss';\r\n\r\nfunction goBack() {\r\n  store.dispatch(returnToGameSelect());\r\n}\r\n\r\nfunction BackToGameSelect() {\r\n  return (\r\n    <div className=\"backToLobby-wrapper\">\r\n      <IconButton aria-label=\"go-back\" color=\"primary\" onClick={goBack}>\r\n        <ArrowBackIcon />\r\n      </IconButton>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BackToGameSelect;","import React, {useState} from 'react';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport ArrowForward from '@material-ui/icons/ArrowForward';\r\n\r\nimport {joinRoom} from '../../socketHandlers';\r\n\r\nconst ENTER_KEY = 13;\r\n\r\nexport default function TextInput() {\r\n  const [roomId, setRoomId] = useState(\"\");\r\n  const preventDefault = (e) => {\r\n    e.preventDefault();\r\n  }\r\n\r\n  function submit() {\r\n    joinRoom(roomId);\r\n  }\r\n  function handleKeyPress(e) {\r\n    if (e.which === ENTER_KEY || e.keyCode === ENTER_KEY) {\r\n      submit();\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <FormControl className=\"form-wrapper\" variant=\"outlined\">\r\n      <InputLabel htmlFor=\"outlined-adornment-roomid\">Room ID</InputLabel>\r\n      <OutlinedInput\r\n        id=\"outlined-adornment-roomid\"\r\n        value={roomId}\r\n        onChange={(e) => {setRoomId(e.target.value);}}\r\n        onKeyPress={handleKeyPress}\r\n        endAdornment={\r\n          <InputAdornment position=\"end\">\r\n            <IconButton\r\n              children={<ArrowForward />}\r\n              onClick={submit}\r\n              onMouseDown={preventDefault}\r\n              edge=\"end\"\r\n            />\r\n          </InputAdornment>\r\n        }\r\n        labelWidth={70}\r\n      />\r\n    </FormControl>\r\n  )\r\n}\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport { roomPrivacyToggled } from \"redux-store/actions/gameSetupActions\";\r\n\r\nimport './aloneSwitch.scss';\r\n\r\nconst mapStateToProps = (state) => {\r\n  const {settings} = state.gameData;\r\n  return {\r\n    isPrivate: settings.isPrivate,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    handleSwitch: (e) => {\r\n      dispatch(roomPrivacyToggled());\r\n    }\r\n  }\r\n}\r\n\r\nfunction PrivateSwitch(props) {\r\n  const {isPrivate, handleSwitch} = props;\r\n\r\n  return (\r\n    <div className=\"setting\">\r\n      <h3>Do you want a public or private room?</h3>\r\n      <div className=\"switch-wrapper\">\r\n        <p>Public</p>\r\n        <Switch\r\n          checked={isPrivate}\r\n          onChange={handleSwitch}\r\n          color=\"primary\"\r\n          name=\"checked\"\r\n          inputProps={{ 'aria-label': 'primary checkbox' }}\r\n        />\r\n        <p>Private</p>\r\n      </div>\r\n      <h6>*At this time, this setting cannot be later changed.</h6>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SubscribedPrivateSwitch = connect(mapStateToProps, mapDispatchToProps)(PrivateSwitch);\r\nexport default SubscribedPrivateSwitch;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport PrivateSwitch from '../privateSwitch';\r\nimport {\r\n  setSpyfallTime,\r\n  MAX_SPYFALL_TIME,\r\n} from 'redux-store/actions/SpecificGameActions/spyfallGameActions';\r\n\r\nimport './spyfallSettings.scss';\r\n\r\nconst mapStateToPropsTL = (state) => {\r\n  const {time} = state.gameData.settings[state.gameCredentials.gamename];\r\n  return {\r\n    time,\r\n  };\r\n}\r\nconst mapDispatchToPropsTL = (dispatch) => {\r\n  return {\r\n    handleSpyfallTime: (e) => {\r\n      dispatch(setSpyfallTime(e.target.value));\r\n    }\r\n  };\r\n}\r\n\r\n\r\nexport function isValidTime(time) {\r\n  return /^\\d+$/.test(time) && Number.parseInt(time) < MAX_SPYFALL_TIME;\r\n}\r\n\r\n\r\nfunction TimeLimit(props) {\r\n  const { time, handleSpyfallTime } = props;\r\n  let error = !isValidTime(time);\r\n  return (\r\n    <div className=\"setting\">\r\n      <h3>How long is the game?</h3>\r\n      <FormControl error={error}>\r\n        <Input\r\n          className=\"time-input\"\r\n          id=\"standard\"\r\n          label=\"Time\"\r\n          value={time}\r\n          onChange={handleSpyfallTime}\r\n          endAdornment={<InputAdornment position=\"end\">min</InputAdornment>}\r\n        />\r\n        {\r\n          error\r\n          ? <FormHelperText id=\"component-error-text\">Must be an integer less than {MAX_SPYFALL_TIME}</FormHelperText>\r\n          : ''\r\n        }\r\n      </FormControl>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nconst SubscribedTimeLimit = connect(mapStateToPropsTL, mapDispatchToPropsTL)(TimeLimit);\r\n\r\nexport default function SpyfallSettings(props) {\r\n  const { showPrivacy } = props;\r\n  return (\r\n    <div className=\"settings-wrapper\">\r\n      { showPrivacy ? <PrivateSwitch /> : ''}\r\n      <SubscribedTimeLimit />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Button from '@material-ui/core/Button';\r\nimport { isValidTime as isValidSpyfall } from 'Games/Settings/SpyfallSettings/spyfallSettings';\r\nimport { createRoomWithSettings, updateRoomSettings } from 'Games/socketHandlers';\r\nimport { setSettingsIsUpdating, lobbyStates } from 'redux-store/actions/gameSetupActions';\r\n\r\nfunction mapStateToProps(state) {\r\n  const gamename = state.gameCredentials.gamename;\r\n  const selectedChoice = state.gameData.selectedChoice;\r\n  const settings = state.gameData.settings;\r\n  const isUpdating = state.gameData.isUpdatings;\r\n  return {\r\n    gamename,\r\n    settings,\r\n    selectedChoice,\r\n    isUpdating,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setIsUpdating: () => {\r\n      dispatch(setSettingsIsUpdating());\r\n    }\r\n  }\r\n}\r\n\r\nfunction validateSettings(context, settings) {\r\n  switch(context) {\r\n    case 'spyfall': {\r\n      return isValidSpyfall(settings[context].time);\r\n    }\r\n    default: return true;\r\n  }\r\n}\r\nfunction SubmitSettings(props) {\r\n  const {gamename, settings, selectedChoice, isUpdating, setIsUpdating} = props;\r\n  let isValid = validateSettings(gamename, settings);\r\n  const isCreating = selectedChoice === lobbyStates.CREATE;\r\n\r\n  function createRoom() {\r\n    if (isCreating) {\r\n      createRoomWithSettings(settings);\r\n    }\r\n    else {\r\n      setIsUpdating();\r\n      updateRoomSettings(settings);\r\n    }\r\n  }\r\n\r\n  return(\r\n    <Button disabled={!isValid || (!isCreating && isUpdating)} variant=\"contained\" onClick={createRoom}>\r\n      {isCreating ? 'Create' : 'Save'} \r\n    </Button>\r\n  );\r\n}\r\n\r\nconst SubscribedSubmitSettings = connect(mapStateToProps, mapDispatchToProps)(SubmitSettings);\r\nexport default SubscribedSubmitSettings;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction mapStateToProps(state) {\r\n  const {settings} = state.gameData;\r\n  return {\r\n    isPrivate: settings.isPrivate,\r\n    time: settings.spyfall.time,\r\n  };\r\n}\r\nfunction SpyfallView(props) {\r\n  const { time } = props;\r\n  return (\r\n    <div className=\"settings-list\">\r\n      <div className=\"settings-item\">\r\n        <div className=\"item-name\">\r\n          <h3>Time Length</h3>\r\n        </div>\r\n        <div className=\"item-value\">\r\n          <h3>{time} minutes</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst SubscribedSpyfallView = connect(mapStateToProps)(SpyfallView);\r\nexport default SubscribedSpyfallView;","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport SpyfallView from './SpyfallSettings/spyfallView';\r\nimport SpyfallSettings from './SpyfallSettings/spyfallSettings';\r\nimport SubmitSettings from 'Games/WaitingRoom/RoomInfoComponents/submitSettings';\r\nimport store from 'redux-store';\r\n\r\nimport './settingsBoard.scss';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction renderCurrentSettings(GameView) {\r\n  return <GameView />\r\n}\r\n\r\nfunction renderEditSettings(GameSettings, showPrivacy) {\r\n  return <GameSettings showPrivacy={showPrivacy}/>;\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  \r\n  const isUpdating = state.gameData.isUpdating;\r\n  return {\r\n    isUpdating,\r\n  };\r\n}\r\n\r\nfunction renderStatusMessage(isUpdating, canEdit) {\r\n  if (canEdit) {\r\n    if(isUpdating) {\r\n      return <h3 className=\"status\">Updating...</h3>;\r\n    }\r\n    return <h3 className=\"status fade-out\">Updated</h3>;\r\n  }\r\n  return '';\r\n}\r\n\r\nfunction SettingsBoard(props) {\r\n  const { canEdit, isUpdating } = props;\r\n  const { gamename } = store.getState().gameCredentials;\r\n  return (\r\n    <Paper className=\"settings-board-wrapper\">\r\n      <div className=\"settings-header\">\r\n        <h1>Game Settings</h1>\r\n        {renderStatusMessage(isUpdating, canEdit)}\r\n      </div>\r\n      {\r\n        canEdit \r\n        ? <div className=\"room-settings\">\r\n            {renderEditSettings(SpyfallSettings, false)}\r\n            <SubmitSettings />\r\n          </div>\r\n        : <div className=\"room-settings\">\r\n            {renderCurrentSettings(SpyfallView)}\r\n          </div>\r\n      }\r\n    </Paper>\r\n  );\r\n}\r\n\r\nconst SubscribedSettingsBoard = connect(mapStateToProps)(SettingsBoard);\r\nexport default SubscribedSettingsBoard;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nimport Loading from 'components/Loading/loading';\r\nimport MyInput from './RoomInfoComponents/myInput';\r\nimport SubmitSettings from './RoomInfoComponents/submitSettings';\r\nimport { joinRoom, getAvailableRooms, startGame } from '../socketHandlers';\r\nimport PrivateSwitch from 'Games/Settings/privateSwitch';\r\nimport SettingsBoard from 'Games/Settings/settingsBoard';\r\n\r\nimport { lobbyStates } from 'redux-store/actions/gameSetupActions';\r\n\r\n\r\nfunction mapStateToPropsRI(state) {\r\n  const gd = state.gameData;\r\n  return {\r\n    username: state.gameCredentials.username,\r\n    gamename: state.gameCredentials.gamename,\r\n    host: gd.host,\r\n    selectedChoice: gd.selectedChoice,\r\n    isConnected: gd.isConnected,\r\n    isLoadingRoom: gd.isLoadingRoom,\r\n    members: gd.members,\r\n    roomId: gd.roomId,\r\n    myIndex: gd.myIndex,\r\n    rooms: gd.rooms,\r\n  };\r\n}\r\n\r\nfunction renderMembers(members, myIndex) {\r\n  if (members.length === 0) {\r\n    return (\r\n      <div className=\"members\">\r\n        <h3>Share your room id to let others join!</h3>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"members\">\r\n      <h3 className=\"others\">Other players</h3>\r\n      {\r\n        members.map((m, index) => \r\n          <h4 \r\n            className={index === myIndex ? \"my-name\" : \"\"}\r\n            key={`${m}${index}`}>{m}</h4>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction renderAvailableRooms(rooms, isLoadingRoom) {\r\n  if (isLoadingRoom) {\r\n    return <Loading />;\r\n  }\r\n  if (rooms.length === 0) {\r\n    return <h3 className=\"no-avail-rooms\">Sorry. No other rooms were found at this time.</h3>\r\n  }\r\n  return rooms.map(room => {\r\n    return (\r\n      <Grid item key={room.hostname} xs={12} className=\"room\">\r\n        <Button className=\"data\" onClick={()=>{joinRoom(room.roomId)}}>\r\n          <h3 className=\"left\">\r\n            Host: &nbsp;\r\n            <span className=\"bold\">{room.hostname}</span>\r\n          </h3>\r\n          <h3 className=\"right\">\r\n            Number of Players: &nbsp;\r\n            <span className=\"bold\">{1 + room.numPlayers}</span>\r\n          </h3>\r\n        </Button>\r\n      </Grid>\r\n    )\r\n  })\r\n}\r\n\r\nfunction renderStartButton(canEdit, numMembers) {\r\n  if (canEdit) {\r\n    if (numMembers > 0) {\r\n      return (\r\n        <Button variant=\"contained\" onClick={startGame} className=\"host-control-panel\">\r\n          Play\r\n        </Button>\r\n      );\r\n    }\r\n    else {\r\n      return <h4 className=\"ask-host\">Invite friends to your lobby to start!</h4>;\r\n    }\r\n  }\r\n  else {\r\n    return <h4 className=\"ask-host\">Ask the host to start the game!</h4>;\r\n  }\r\n}\r\n\r\nfunction RoomInfo(props) {\r\n  const { isConnected, selectedChoice, host, roomId, members, myIndex, rooms, isLoadingRoom } = props;\r\n  if (!isConnected || !selectedChoice) { return \"\"; }\r\n\r\n  function copyToClipboard(e) {\r\n    navigator.clipboard.writeText(roomId).then(() => {\r\n      console.log('copied');\r\n    })\r\n  }\r\n\r\n  if (selectedChoice === lobbyStates.CREATE) {\r\n    return (\r\n      <div className=\"room-settings\">\r\n        <div className=\"settings-wrapper\">\r\n          <PrivateSwitch />\r\n          <SubmitSettings />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  else if(selectedChoice === lobbyStates.JOIN) {\r\n    return (\r\n      <div className=\"room-list\">\r\n        <div className=\"input\">\r\n          <h4>Enter the room id you would like to join:</h4>\r\n          <MyInput />\r\n        </div>\r\n        <div className=\"refresh-row\">\r\n          <h4>Otherwise, click on one of the available rooms to join.</h4>\r\n          <IconButton color=\"primary\" aria-label=\"refresh\" \r\n            onClick={getAvailableRooms}>\r\n            <RefreshIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Grid container spacing={3} className=\"rooms-wrapper\">\r\n          { renderAvailableRooms(rooms, isLoadingRoom) }\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n  else {\r\n    let hostClass = \"\";\r\n    let canEdit = selectedChoice === lobbyStates.CREATED;\r\n    if (canEdit) {\r\n      hostClass = \"my-name\";\r\n    }\r\n    return (\r\n      <div className=\"room-info\">\r\n        <SettingsBoard canEdit={canEdit}/>\r\n        <div className=\"room-title\">\r\n          <h2>Host: <span className={hostClass}>{host}</span></h2>\r\n          <h2>Room id: <span className=\"roomId\" onClick={copyToClipboard}>{roomId}</span></h2>\r\n        </div>\r\n        {renderStartButton(canEdit, members.length)}\r\n        {renderMembers(members, myIndex)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst SubscribedRoomInfo = connect(mapStateToPropsRI)(RoomInfo);\r\nexport default SubscribedRoomInfo;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Loading from 'components/Loading/loading';\r\nimport { setSelectedChoiceAndLoadingRoom } from 'redux-store/actions/gameSetupActions';\r\nimport { getAvailableRooms, ejectFromRoom } from '../socketHandlers';\r\nimport { lobbyStates } from 'redux-store/actions/gameSetupActions';\r\n\r\nfunction setDisableProps(obj) {\r\n  obj.className += \" disabled\";\r\n  obj.variant = \"outlined\";\r\n}\r\n\r\nfunction ConnectedChoices(props) {\r\n  const { isConnected, selectedChoice, handleSelect } = props;\r\n  if (!isConnected) { return <Loading />; }\r\n\r\n  const createButtonProps = {\r\n    variant: \"contained\",\r\n    className: \"button\",\r\n    onClick: () => handleSelect(lobbyStates.CREATE),\r\n  };\r\n  const joinButtonProps = {\r\n    variant: \"contained\",\r\n    className: \"button\",\r\n    onClick: () => handleSelect(lobbyStates.JOIN),\r\n  };\r\n\r\n\r\n  if (selectedChoice === lobbyStates.CREATE || selectedChoice === lobbyStates.CREATED) {\r\n    setDisableProps(joinButtonProps);\r\n    delete createButtonProps.onClick;\r\n    createButtonProps.disableRipple = true;\r\n  }\r\n  else if (selectedChoice === lobbyStates.JOIN || selectedChoice === lobbyStates.JOINED) {\r\n    setDisableProps(createButtonProps);\r\n    delete joinButtonProps.onClick;\r\n    joinButtonProps.disableRipple = true;\r\n  }\r\n  return (\r\n    <div className=\"connected-choices\">\r\n      <Button \r\n        color=\"primary\"\r\n        disableElevation\r\n        {...createButtonProps}\r\n        >Create Room</Button>\r\n      <Button \r\n        color=\"primary\"\r\n        disableElevation\r\n        {...joinButtonProps}\r\n        >Join Room</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToPropsCC(state) {\r\n  const gd = state.gameData;\r\n  return {\r\n    isConnected: gd.isConnected,\r\n    selectedChoice: gd.selectedChoice\r\n  }\r\n}\r\n\r\nfunction mapDispatchToPropsCC(dispatch) {\r\n  return {\r\n    handleSelect: (e) => {\r\n      if(e === lobbyStates.CREATE) {\r\n        ejectFromRoom();\r\n      }\r\n      if(e === lobbyStates.JOIN) {\r\n        getAvailableRooms();\r\n      }\r\n      dispatch(setSelectedChoiceAndLoadingRoom(e));\r\n    }\r\n  }\r\n}\r\nconst SubscribedConnectedChoices = connect(mapStateToPropsCC, mapDispatchToPropsCC)(ConnectedChoices);\r\nexport default SubscribedConnectedChoices;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nimport './waitingRoom.scss';\r\n\r\nimport BackToGameSelect from 'components/BackToGameSelect/backToGameSelect';\r\nimport RoomInfo from './roomInfo';\r\nimport ConnectedChoices from './connectedChoices';\r\nimport {clearRoomInfo } from 'redux-store/actions/gameSetupActions';\r\nimport { connectToServer, ejectFromRoom } from '../socketHandlers';\r\nimport store from 'redux-store';\r\n\r\nconst storageType = sessionStorage;\r\n\r\nfunction mapStateToPropsWR(state) {\r\n  const { gamename, username } = state.gameCredentials\r\n  return {\r\n    gamename,\r\n    username,\r\n    isPlaying: state.gameData.isPlaying,\r\n  };\r\n}\r\n\r\nfunction WaitingRoom(props) {\r\n  const { gamename, username, isPlaying } = props;\r\n  const { location } = props;\r\n\r\n  useEffect(() => {\r\n    if (process.env.REACT_APP_DESIGN !== \"true\") {\r\n      if (!store.getState().gameData.isConnected){\r\n        connectToServer();\r\n      }\r\n    }\r\n    document.title= \"Waiting Room\";\r\n  },[]);\r\n\r\n  if(!gamename) {\r\n    ejectFromRoom();\r\n    store.dispatch(clearRoomInfo());\r\n    return <Redirect to=\"/games\" />;\r\n  }\r\n\r\n  if (isPlaying) {\r\n    storageType.setItem('gameData', JSON.stringify(store.getState().gameData));\r\n    return (\r\n      <Redirect push to={`${location.pathname}/play`} />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"wrapper waiting-room-wrapper\">\r\n      <div className=\"header-text\">\r\n        <div className=\"same-row\">\r\n          <BackToGameSelect/>\r\n          <h1>Play {gamename}</h1>\r\n        </div>\r\n        <h3>Your name is: {username}</h3>\r\n      </div>\r\n      <ConnectedChoices />\r\n\r\n      <RoomInfo\r\n        username={username}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nconst SubscribedWaitingRoom = connect(mapStateToPropsWR)(WaitingRoom);\r\nexport default SubscribedWaitingRoom;","import React from 'react';\r\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport Testing from 'pages/testing'\r\nimport MainPage from 'pages/MainPage/mainPage';\r\nimport Games from 'pages/games';\r\nimport Spyfall from 'Games/Spyfall';\r\nimport WaitingRoom from 'Games/WaitingRoom/waitingRoom';\r\nimport BackToLobby from 'components/BackToLobby/backToLobby';\r\nimport store from 'redux-store';\r\n\r\nimport './App.css';\r\n\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport green from '@material-ui/core/colors/green';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: blue,\r\n    secondary: green,\r\n  },\r\n  status: {\r\n    danger: 'orange',\r\n  },\r\n});\r\n\r\n\r\n// function ComebackGame(props) {\r\n//   const { match: {params}} = props;\r\n//   return <div>\r\n//     <h1>\r\n//       <span style={{textTransform: \"uppercase\"}}>{params.name}</span> is not yet built. Come back soon.\r\n//       </h1>\r\n//   </div>;\r\n// }\r\n\r\nfunction App() {  \r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n    <Provider store={store}>\r\n    <HashRouter basename=\"/\">\r\n        <Switch>\r\n          <Route exact path=\"/\" component={MainPage} />\r\n          <Route path=\"/testing\" component={Testing} /> \r\n          <Route path=\"/testcomponent\" component={BackToLobby} />\r\n\r\n          <Route path=\"/games/spyfall/play\" component={Spyfall} />\r\n          <Route path=\"/games/:name\" component={WaitingRoom} />\r\n          \r\n          <Route path=\"/games\" component={Games} />\r\n\r\n          <Route>\r\n            <Redirect to=\"/\" />\r\n          </Route>\r\n        </Switch>\r\n    </HashRouter>\r\n    </Provider>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}